{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Programmation 1 - C\u00e9gep de Victoriaville Enseignant Fr\u00e9d\u00e9rik Taleb Github Classroom Se connecter avec votre adresse @etudiant.cegepvicto.ca Lien pour Github Classroom Horaire Groupe 1 Lundi : C-211 8h15 \u00e0 10h05 Mardi : C-211 10h15 \u00e0 12h05 Vendredi : C-205 13h15 \u00e0 15h05 Groupe 2 Lundi : C-211 10h15 \u00e0 12h05 Mardi : C-211 15h15 \u00e0 17h05 Vendredi : C-205 8h15 \u00e0 10h05 Planification de la session En construction","title":"Accueil"},{"location":"#programmation-1-cegep-de-victoriaville","text":"","title":"Programmation 1 - C\u00e9gep de Victoriaville"},{"location":"#enseignant","text":"Fr\u00e9d\u00e9rik Taleb","title":"Enseignant"},{"location":"#github-classroom","text":"Se connecter avec votre adresse @etudiant.cegepvicto.ca Lien pour Github Classroom","title":"Github Classroom"},{"location":"#horaire","text":"Groupe 1 Lundi : C-211 8h15 \u00e0 10h05 Mardi : C-211 10h15 \u00e0 12h05 Vendredi : C-205 13h15 \u00e0 15h05 Groupe 2 Lundi : C-211 10h15 \u00e0 12h05 Mardi : C-211 15h15 \u00e0 17h05 Vendredi : C-205 8h15 \u00e0 10h05","title":"Horaire"},{"location":"#planification-de-la-session","text":"En construction","title":"Planification de la session"},{"location":"exBouclesTableaux/","text":"Exercices boucles et tableaux 1. \u00c9crire une m\u00e9thode qui trouve le nombre maximum dans un tableau re\u00e7u en param\u00e8tre 2. \u00c9crire une m\u00e9thode qui trouve le nombre de fois qu'une lettre est pr\u00e9sente dans un mot. La lettre et le mot sont en param\u00e8tre 3. \u00c9crire un m\u00e9thode qui donne la position de la premi\u00e8re fois que l'on trouve une lettre dans un mot. La lettre et le mot sont en param\u00e8tre 4. \u00c9crire une m\u00e9thode qui affiche le nombre de true et le nombre de false dans un tableau de bool\u00e9ens. Le tableau est donn\u00e9 en param\u00e8tre 5. \u00c9crire une m\u00e9thode qui affiche la plus longue s\u00e9quence 1 dans un tableau de 0 et 1. Le tableau est donn\u00e9e en param\u00e8tre","title":"Boucles et tableaux"},{"location":"exBouclesTableaux/#exercices-boucles-et-tableaux","text":"","title":"Exercices boucles et tableaux"},{"location":"exBouclesTableaux/#1-ecrire-une-methode-qui-trouve-le-nombre-maximum-dans-un-tableau-recu-en-parametre","text":"","title":"1. \u00c9crire une m\u00e9thode qui trouve le nombre maximum dans un tableau re\u00e7u en param\u00e8tre"},{"location":"exBouclesTableaux/#2-ecrire-une-methode-qui-trouve-le-nombre-de-fois-quune-lettre-est-presente-dans-un-mot-la-lettre-et-le-mot-sont-en-parametre","text":"","title":"2. \u00c9crire une m\u00e9thode qui trouve le nombre de fois qu'une lettre est pr\u00e9sente dans un mot. La lettre et le mot sont en param\u00e8tre"},{"location":"exBouclesTableaux/#3-ecrire-un-methode-qui-donne-la-position-de-la-premiere-fois-que-lon-trouve-une-lettre-dans-un-mot-la-lettre-et-le-mot-sont-en-parametre","text":"","title":"3. \u00c9crire un m\u00e9thode qui donne la position de la premi\u00e8re fois que l'on trouve une lettre dans un mot. La lettre et le mot sont en param\u00e8tre"},{"location":"exBouclesTableaux/#4-ecrire-une-methode-qui-affiche-le-nombre-de-true-et-le-nombre-de-false-dans-un-tableau-de-booleens-le-tableau-est-donne-en-parametre","text":"","title":"4. \u00c9crire une m\u00e9thode qui affiche le nombre de true et le nombre de false dans un tableau de bool\u00e9ens. Le tableau est donn\u00e9 en param\u00e8tre"},{"location":"exBouclesTableaux/#5-ecrire-une-methode-qui-affiche-la-plus-longue-sequence-1-dans-un-tableau-de-0-et-1-le-tableau-est-donnee-en-parametre","text":"","title":"5. \u00c9crire une m\u00e9thode qui affiche la plus longue s\u00e9quence 1 dans un tableau de 0 et 1. Le tableau est donn\u00e9e en param\u00e8tre"},{"location":"exSem1/","text":"Exercices de la semaine 1 : variables et conditions 1. Aire et p\u00e9rim\u00e8tre du rectangle Cr\u00e9er un programme qui demande \u00e0 l'utilisateur la longueur et la largeur d'un rectangle Calculer l'aire et le p\u00e9rim\u00e8tre du rectangle Afficher l'aire et le p\u00e9rim\u00e8tre \u00e0 la console Formules 2. Conversion de Bitcoin Cr\u00e9er un programme qui demande \u00e0 l'utilisateur combien il poss\u00e8de de Bitcoin et affiche la valeur en dollars canadiens. 1 Bitcoin = 62315.32$ CAD pour les besoin du cours 3. Salaire brut Cr\u00e9er un programme qui calcul le salaire brut d'un employ\u00e9 pour l'ann\u00e9e L'utilisateur entre le nombre d'heures effectu\u00e9es par semaine et son taux horaire Afficher le r\u00e9sultat 4. Permutation (swap) Une technique tr\u00e8s utilis\u00e9e dans les algorithme de tri est d'\u00e9changer la valeur entre 2 variables. Par habitude, convention, paresse ou anglicisme, on appelle cette op\u00e9ration swap. Cr\u00e9er un programme qui lit deux nombres \u00e0 la console et les assigne chacun \u00e0 leur variable \u00c9changer le contenu des deux variables : a contient 3 et b contient -15 devient a contient -15 et b contient 3 Afficher la valeur de a et b 5. Le plus grand Cr\u00e9er un programme qui lit 2 nombres et affiche le plus grand des 2. 6. Pokemon Cr\u00e9er un programme qui calcule la force et l\u2019agilit\u00e9 d\u2019un personnage en fonction de son type. Les valeurs de d\u00e9part sont de 100 points pour les deux caract\u00e9ristiques. Si l\u2019utilisateur choisit le type feu, le personnage a 10% de plus de force, mais 15% de moins d\u2019agilit\u00e9. Si l\u2019utilisateur choisit le type eau, son personnage a 10% de moins de force, mais 15% de plus d\u2019agilit\u00e9. 7. Exposant Cr\u00e9er un programme qui demande \u00e0 l'utilisateur un nombre et l'exposant \u00e0 appliquer (ex: 2^4) Si l'exposant est 0 le r\u00e9sultat est toujours 1 Si l'exposant est 1 le r\u00e9sultat est le nombre entr\u00e9 par l'utilisateur Si l'exposant est 2 on calcul le nombre au carr\u00e9 avec les op\u00e9rations arithm\u00e9tiques Si l'exposant est 3 on calcul le nombre au cube comme au point pr\u00e9c\u00e9dent Si l'exposant est plus grand que 3 on affiche : \"Attends un peu, je vais voir les boucles la semaine prochaine\" sinon on affiche le r\u00e9sultat","title":"Semaine 1"},{"location":"exSem1/#exercices-de-la-semaine-1-variables-et-conditions","text":"","title":"Exercices de la semaine 1 : variables et conditions"},{"location":"exSem1/#1-aire-et-perimetre-du-rectangle","text":"Cr\u00e9er un programme qui demande \u00e0 l'utilisateur la longueur et la largeur d'un rectangle Calculer l'aire et le p\u00e9rim\u00e8tre du rectangle Afficher l'aire et le p\u00e9rim\u00e8tre \u00e0 la console Formules","title":"1. Aire et p\u00e9rim\u00e8tre du rectangle"},{"location":"exSem1/#2-conversion-de-bitcoin","text":"Cr\u00e9er un programme qui demande \u00e0 l'utilisateur combien il poss\u00e8de de Bitcoin et affiche la valeur en dollars canadiens. 1 Bitcoin = 62315.32$ CAD pour les besoin du cours","title":"2. Conversion de Bitcoin"},{"location":"exSem1/#3-salaire-brut","text":"Cr\u00e9er un programme qui calcul le salaire brut d'un employ\u00e9 pour l'ann\u00e9e L'utilisateur entre le nombre d'heures effectu\u00e9es par semaine et son taux horaire Afficher le r\u00e9sultat","title":"3. Salaire brut"},{"location":"exSem1/#4-permutation-swap","text":"Une technique tr\u00e8s utilis\u00e9e dans les algorithme de tri est d'\u00e9changer la valeur entre 2 variables. Par habitude, convention, paresse ou anglicisme, on appelle cette op\u00e9ration swap. Cr\u00e9er un programme qui lit deux nombres \u00e0 la console et les assigne chacun \u00e0 leur variable \u00c9changer le contenu des deux variables : a contient 3 et b contient -15 devient a contient -15 et b contient 3 Afficher la valeur de a et b","title":"4. Permutation (swap)"},{"location":"exSem1/#5-le-plus-grand","text":"Cr\u00e9er un programme qui lit 2 nombres et affiche le plus grand des 2.","title":"5. Le plus grand"},{"location":"exSem1/#6-pokemon","text":"Cr\u00e9er un programme qui calcule la force et l\u2019agilit\u00e9 d\u2019un personnage en fonction de son type. Les valeurs de d\u00e9part sont de 100 points pour les deux caract\u00e9ristiques. Si l\u2019utilisateur choisit le type feu, le personnage a 10% de plus de force, mais 15% de moins d\u2019agilit\u00e9. Si l\u2019utilisateur choisit le type eau, son personnage a 10% de moins de force, mais 15% de plus d\u2019agilit\u00e9.","title":"6. Pokemon"},{"location":"exSem1/#7-exposant","text":"Cr\u00e9er un programme qui demande \u00e0 l'utilisateur un nombre et l'exposant \u00e0 appliquer (ex: 2^4) Si l'exposant est 0 le r\u00e9sultat est toujours 1 Si l'exposant est 1 le r\u00e9sultat est le nombre entr\u00e9 par l'utilisateur Si l'exposant est 2 on calcul le nombre au carr\u00e9 avec les op\u00e9rations arithm\u00e9tiques Si l'exposant est 3 on calcul le nombre au cube comme au point pr\u00e9c\u00e9dent Si l'exposant est plus grand que 3 on affiche : \"Attends un peu, je vais voir les boucles la semaine prochaine\" sinon on affiche le r\u00e9sultat","title":"7. Exposant"},{"location":"exSem2/","text":"Exercices de la semaine 2 : conditions et boucles 1. Compte \u00e0 rebours \u00c9crire un programme qui saisit un nombre puis affiche ce nombre et tout les nombres jusqu'\u00e0 0. 2. Nombre d'occurences \u00c9crire un programme qui demande \u00e0 l'utilisateur d'entrer des nombres entiers. Les nombres sont saisis tant que l'utilisateur n'entre pas 0. Afficher combien de nombres positifs et combien de nombres n\u00e9gatifs ont \u00e9t\u00e9 saisis \u00e0 la fin seulement. 3. Calcul d'une moyenne \u00c9crire un programme qui demande \u00e0 l'utilisateur d'entrer des notes et ensuite calcule la moyenne. Les notes sont saisies tant que l'utilisateur n'entre pas une note n\u00e9gative. Si la note entr\u00e9e est positive on l'accumule pour avoir le total. \u00c0 la fin on divise le total par le nombre de notes entr\u00e9es pour avoir la moyenne et le r\u00e9sultat est affich\u00e9 \u00e0 la console.","title":"Semaine 2"},{"location":"exSem2/#exercices-de-la-semaine-2-conditions-et-boucles","text":"","title":"Exercices de la semaine 2 : conditions et boucles"},{"location":"exSem2/#1-compte-a-rebours","text":"\u00c9crire un programme qui saisit un nombre puis affiche ce nombre et tout les nombres jusqu'\u00e0 0.","title":"1. Compte \u00e0 rebours"},{"location":"exSem2/#2-nombre-doccurences","text":"\u00c9crire un programme qui demande \u00e0 l'utilisateur d'entrer des nombres entiers. Les nombres sont saisis tant que l'utilisateur n'entre pas 0. Afficher combien de nombres positifs et combien de nombres n\u00e9gatifs ont \u00e9t\u00e9 saisis \u00e0 la fin seulement.","title":"2. Nombre d'occurences"},{"location":"exSem2/#3-calcul-dune-moyenne","text":"\u00c9crire un programme qui demande \u00e0 l'utilisateur d'entrer des notes et ensuite calcule la moyenne. Les notes sont saisies tant que l'utilisateur n'entre pas une note n\u00e9gative. Si la note entr\u00e9e est positive on l'accumule pour avoir le total. \u00c0 la fin on divise le total par le nombre de notes entr\u00e9es pour avoir la moyenne et le r\u00e9sultat est affich\u00e9 \u00e0 la console.","title":"3. Calcul d'une moyenne"},{"location":"exSem4a/","text":"Exercices de la semaine 4 : boucles et m\u00e9thodes Partie 1 R\u00e9aliser les exercies en utilisant la boucle for 1. Faire afficher 15 fois le mot \"ATTENTION\".\u200b 2. Afficher les nombres de 1 \u00e0 10 avec le carr\u00e9 et le cube de chacun de ces nombres.\u200b 3. Convertir les valeurs Fahrenheit de -40 \u00e0 40 en Celsius par tranche de 5. (Celsius = 5/9(fahrenheit-32))\u200b 4. Afficher le montant et la taxe de 15% pour les montants de $5.00 \u00e0 $100.00 par tranche de $5.00. \u200b 5. Prouver qu'il est pr\u00e9f\u00e9rable de prendre un montant de 0.01 dollars qui double \u00e0 chaque jours pendant 1 mois (30 jours) que de prendre 1 million de dollars maintenant 6. Afficher les nombres impairs de 1 \u00e0 49\u200b 7. Afficher les nombres impairs de 1 \u00e0 49, et mettre 5 valeurs par ligne 8. Afficher les motifs suivants \u00e0 la console Indices : une boucle peut \u00eatre \u00e0 l'int\u00e9rieur d'une boucle Console.Write(\"...\") affiche \u00e0 la console sans finir la ligne Soyez cr\u00e9atifs avec la variable de la boucle (i,j,k, etc...) a # ## ### #### b 1 12 123 1234 c #### ### ## # d 1 23 456 78910 e 123 456 789","title":"Semaine 4"},{"location":"exSem4a/#exercices-de-la-semaine-4-boucles-et-methodes","text":"","title":"Exercices de la semaine 4 : boucles et m\u00e9thodes"},{"location":"exSem4a/#partie-1","text":"R\u00e9aliser les exercies en utilisant la boucle for","title":"Partie 1"},{"location":"exSem4a/#1-faire-afficher-15-fois-le-mot-attention","text":"","title":"1. Faire afficher 15 fois le mot \"ATTENTION\".\u200b"},{"location":"exSem4a/#2-afficher-les-nombres-de-1-a-10-avec-le-carre-et-le-cube-de-chacun-de-ces-nombres","text":"","title":"2. Afficher les nombres de 1 \u00e0 10 avec le carr\u00e9 et le cube de chacun de ces nombres.\u200b"},{"location":"exSem4a/#3-convertir-les-valeurs-fahrenheit-de-40-a-40-en-celsius-par-tranche-de-5-celsius-59fahrenheit-32","text":"","title":"3. Convertir les valeurs Fahrenheit de -40 \u00e0 40 en Celsius par tranche de 5. (Celsius = 5/9(fahrenheit-32))\u200b"},{"location":"exSem4a/#4-afficher-le-montant-et-la-taxe-de-15-pour-les-montants-de-500-a-10000-par-tranche-de-500","text":"","title":"4. Afficher le montant et la taxe de 15% pour les montants de $5.00 \u00e0 $100.00 par tranche de $5.00. \u200b"},{"location":"exSem4a/#5-prouver-quil-est-preferable-de-prendre-un-montant-de-001-dollars-qui-double-a-chaque-jours-pendant-1-mois-30-jours-que-de-prendre-1-million-de-dollars-maintenant","text":"","title":"5. Prouver qu'il est pr\u00e9f\u00e9rable de prendre un montant de 0.01 dollars qui double \u00e0 chaque jours pendant 1 mois (30 jours) que de prendre 1 million de dollars maintenant"},{"location":"exSem4a/#6-afficher-les-nombres-impairs-de-1-a-49","text":"","title":"6. Afficher les nombres impairs de 1 \u00e0 49\u200b"},{"location":"exSem4a/#7-afficher-les-nombres-impairs-de-1-a-49-et-mettre-5-valeurs-par-ligne","text":"","title":"7. Afficher les nombres impairs de 1 \u00e0 49, et mettre 5 valeurs par ligne"},{"location":"exSem4a/#8-afficher-les-motifs-suivants-a-la-console","text":"Indices : une boucle peut \u00eatre \u00e0 l'int\u00e9rieur d'une boucle Console.Write(\"...\") affiche \u00e0 la console sans finir la ligne Soyez cr\u00e9atifs avec la variable de la boucle (i,j,k, etc...)","title":"8. Afficher les motifs suivants \u00e0 la console"},{"location":"exSem4a/#a","text":"# ## ### ####","title":"a"},{"location":"exSem4a/#b","text":"1 12 123 1234","title":"b"},{"location":"exSem4a/#c","text":"#### ### ## #","title":"c"},{"location":"exSem4a/#d","text":"1 23 456 78910","title":"d"},{"location":"exSem4a/#e","text":"123 456 789","title":"e"},{"location":"exSem5/","text":"Exercices de la semaine 5 : r\u00e9vision des calculs, lecture/\u00e9criture, if Lien vers Github Classroom // \u00c9crire une m\u00e9thode qui lit la taille d'un utilisateur et dit s'il est petit, moyen, ou grand // petit : moins de 1,70m // moyen : de 1,70m \u00e0 1,82m // grand : plus de 1,82m static void ex1() { } // \u00c9crire la m\u00e9thode qui trouve le plus grand de trois nombres entr\u00e9s \u00e0 la console static void ex2() { } // \u00c0 partir des angles internes d'un triangle d\u00e9terminer si le triangle est valide ou non // La somme des angles d'un triangle est toujours 180 degr\u00e9s static void ex3() { } // Saisir la longueur des 3 c\u00f4t\u00e9s d'un triangle (a, b et c) // \u00c0 partir des informations d\u00e9terminer si le triangle est // \u00c9quilat\u00e9ral : tous les c\u00f4t\u00e9s ont la m\u00eame longueur // Isoc\u00e8le : 2 c\u00f4t\u00e9s \u00e9gaux // Scal\u00e8ne : aucun c\u00f4t\u00e9 n'est \u00e9gal static void ex4() { } // \u00c0 partir des informations fournies par l'utilisateur calculer la facture du mois pour sa consommation d'\u00e9lectricit\u00e9 // Frais d'acc\u00e8s au r\u00e9seau par jour : 0.42238$ // Jusqu'\u00e0 40kWh par jour pour le total des jours (ex: 30 jours = 1200kWh) : 0.06319$ par kWh // kWh suppl\u00e9mentaires : 0.09749$ par kWh static void ex5() { } // Jeux pair ou impair // Le premier joueur choisi 0 ou 1 // Le premier joueur choisi pair ou impair // On efface la console // Le deuxi\u00e8me joueur choisi 0 ou 1 // On affiche le gagnant selon la somme des deux nombres // Si la sommme correspond au type de r\u00e9sultat choisi par le premier joueur (pair ou impair) il a gagn\u00e9 // Sinon le 2\u00e8me joueur a gagn\u00e9 static void ex6() { } // Pour \u00eatre admis en m\u00e9decine il faut // Une cote R au-dessus de 33.0 // Une note sup\u00e9rieure \u00e0 70% en biologie, chimie et math\u00e9matiques // Une moyenne sup\u00e9rieure \u00e0 80% pour les 3 cours pr\u00e9c\u00e9dents // \u00c9crire le programme qui d\u00e9termine si l'utilisateur est \u00e9ligible static void ex7() { }","title":"Semaine 5"},{"location":"exSem5/#exercices-de-la-semaine-5-revision-des-calculs-lectureecriture-if","text":"Lien vers Github Classroom // \u00c9crire une m\u00e9thode qui lit la taille d'un utilisateur et dit s'il est petit, moyen, ou grand // petit : moins de 1,70m // moyen : de 1,70m \u00e0 1,82m // grand : plus de 1,82m static void ex1() { } // \u00c9crire la m\u00e9thode qui trouve le plus grand de trois nombres entr\u00e9s \u00e0 la console static void ex2() { } // \u00c0 partir des angles internes d'un triangle d\u00e9terminer si le triangle est valide ou non // La somme des angles d'un triangle est toujours 180 degr\u00e9s static void ex3() { } // Saisir la longueur des 3 c\u00f4t\u00e9s d'un triangle (a, b et c) // \u00c0 partir des informations d\u00e9terminer si le triangle est // \u00c9quilat\u00e9ral : tous les c\u00f4t\u00e9s ont la m\u00eame longueur // Isoc\u00e8le : 2 c\u00f4t\u00e9s \u00e9gaux // Scal\u00e8ne : aucun c\u00f4t\u00e9 n'est \u00e9gal static void ex4() { } // \u00c0 partir des informations fournies par l'utilisateur calculer la facture du mois pour sa consommation d'\u00e9lectricit\u00e9 // Frais d'acc\u00e8s au r\u00e9seau par jour : 0.42238$ // Jusqu'\u00e0 40kWh par jour pour le total des jours (ex: 30 jours = 1200kWh) : 0.06319$ par kWh // kWh suppl\u00e9mentaires : 0.09749$ par kWh static void ex5() { } // Jeux pair ou impair // Le premier joueur choisi 0 ou 1 // Le premier joueur choisi pair ou impair // On efface la console // Le deuxi\u00e8me joueur choisi 0 ou 1 // On affiche le gagnant selon la somme des deux nombres // Si la sommme correspond au type de r\u00e9sultat choisi par le premier joueur (pair ou impair) il a gagn\u00e9 // Sinon le 2\u00e8me joueur a gagn\u00e9 static void ex6() { } // Pour \u00eatre admis en m\u00e9decine il faut // Une cote R au-dessus de 33.0 // Une note sup\u00e9rieure \u00e0 70% en biologie, chimie et math\u00e9matiques // Une moyenne sup\u00e9rieure \u00e0 80% pour les 3 cours pr\u00e9c\u00e9dents // \u00c9crire le programme qui d\u00e9termine si l'utilisateur est \u00e9ligible static void ex7() { }","title":"Exercices de la semaine 5 : r\u00e9vision des calculs, lecture/\u00e9criture, if"},{"location":"for/","text":"Boucle : for La boucle for fait une nombre d\u00e9termin\u00e9 de r\u00e9p\u00e9titions. Elle est utilis\u00e9e quand on sait exactement le nombre d'op\u00e9rations \u00e0 effectuer. Syntaxe for(variable pour compter; condition de fin; modification de la varible pour compter) { // instructions } En C# Par convention (et en lien avec les math\u00e9matiques) les compteurs utilis\u00e9s sont habituellement : i, j, k, u, v, w Mais il est possible de nommer la variables autrement tant que l'on respecte les r\u00e8gle de nomenclature d'une variable // Cette boucle affiche de 0 \u00e0 9 \u00e0 l'\u00e9cran for(int i = 0; i < 10; i++) { Console.WriteLine(i); } Condition de fin La boucle arr\u00eate quand la condition de fin a une valeur logique : FAUX Il n'est pas obligatoire de toujours utiliser une incr\u00e9mentation de 1 R\u00e9p\u00e9ter des instructions For sert souvent \u00e0 r\u00e9p\u00e9ter des instructions un nombre de fois d\u00e9termin\u00e9. La variable qui sert de compteur joue aussi fr\u00e9quement un r\u00f4le dans les instructions. Par exemple cette boucle effectue 8 fois les instructions entre les accolades string motDePasse = \"\"; for(int i = 0; i < 8; i++) { motDePasse = motDePasse + i; } Ici le mot de passe commence vide. i est la variable qui sert de compteur, elle commence \u00e0 0 et augmente de 1 \u00e0 chaque fois que les instructions de la boucle sont ex\u00e9cut\u00e9es. Les instructions de la boulces sont ex\u00e9cut\u00e9es autant de fois que i est plus petit que 8. \u00c0 chaque fois que les instructions de la boucle sont ex\u00e9cut\u00e9es on ajoute i au string. \u00c0 la fin de la boucle le mot de passe contient \"01234567\". Utilisation avec les tableaux Dans la grande majorit\u00e9 des cas, la boucle for est utilis\u00e9e pour parcourir un tableau de la permi\u00e8re \u00e0 la derni\u00e8re case. La variable compteur (i, j, k, etc..) est utilis\u00e9e pour d\u00e9signer la case (l'index) du tableau \u00e0 traiter. Un tableau commence toujours \u00e0 l'index (num\u00e9ro de la case) 0, donc on donne au compteur (ex: i, j, k) la valeur de 0 pour commencer. Un tableau fini toujours \u00e0 la case dont l'index est : le nombre d'\u00e9l\u00e9ments (cases) du tableau - 1. Donc on met la condition de fin de la boucle \u00e0 : compteur < nombre d'\u00e9lements. // Boucle g\u00e9n\u00e9rale pour parcourir un tableau // Ici on assigne un nombre al\u00e9atoire de 0 \u00e0 100 pour chaque \u00e9l\u00e9ment du tableau Random rng = new Random(); int[] tab = new int[30]; for(int i = 0; i < tab.Length; i++) { tab[i] = rng.Next(0,101); }","title":"For"},{"location":"for/#boucle-for","text":"La boucle for fait une nombre d\u00e9termin\u00e9 de r\u00e9p\u00e9titions. Elle est utilis\u00e9e quand on sait exactement le nombre d'op\u00e9rations \u00e0 effectuer.","title":"Boucle : for"},{"location":"for/#syntaxe","text":"for(variable pour compter; condition de fin; modification de la varible pour compter) { // instructions }","title":"Syntaxe"},{"location":"for/#en-c","text":"Par convention (et en lien avec les math\u00e9matiques) les compteurs utilis\u00e9s sont habituellement : i, j, k, u, v, w Mais il est possible de nommer la variables autrement tant que l'on respecte les r\u00e8gle de nomenclature d'une variable // Cette boucle affiche de 0 \u00e0 9 \u00e0 l'\u00e9cran for(int i = 0; i < 10; i++) { Console.WriteLine(i); }","title":"En C#"},{"location":"for/#condition-de-fin","text":"La boucle arr\u00eate quand la condition de fin a une valeur logique : FAUX Il n'est pas obligatoire de toujours utiliser une incr\u00e9mentation de 1","title":"Condition de fin"},{"location":"for/#repeter-des-instructions","text":"For sert souvent \u00e0 r\u00e9p\u00e9ter des instructions un nombre de fois d\u00e9termin\u00e9. La variable qui sert de compteur joue aussi fr\u00e9quement un r\u00f4le dans les instructions. Par exemple cette boucle effectue 8 fois les instructions entre les accolades string motDePasse = \"\"; for(int i = 0; i < 8; i++) { motDePasse = motDePasse + i; } Ici le mot de passe commence vide. i est la variable qui sert de compteur, elle commence \u00e0 0 et augmente de 1 \u00e0 chaque fois que les instructions de la boucle sont ex\u00e9cut\u00e9es. Les instructions de la boulces sont ex\u00e9cut\u00e9es autant de fois que i est plus petit que 8. \u00c0 chaque fois que les instructions de la boucle sont ex\u00e9cut\u00e9es on ajoute i au string. \u00c0 la fin de la boucle le mot de passe contient \"01234567\".","title":"R\u00e9p\u00e9ter des instructions"},{"location":"for/#utilisation-avec-les-tableaux","text":"Dans la grande majorit\u00e9 des cas, la boucle for est utilis\u00e9e pour parcourir un tableau de la permi\u00e8re \u00e0 la derni\u00e8re case. La variable compteur (i, j, k, etc..) est utilis\u00e9e pour d\u00e9signer la case (l'index) du tableau \u00e0 traiter. Un tableau commence toujours \u00e0 l'index (num\u00e9ro de la case) 0, donc on donne au compteur (ex: i, j, k) la valeur de 0 pour commencer. Un tableau fini toujours \u00e0 la case dont l'index est : le nombre d'\u00e9l\u00e9ments (cases) du tableau - 1. Donc on met la condition de fin de la boucle \u00e0 : compteur < nombre d'\u00e9lements. // Boucle g\u00e9n\u00e9rale pour parcourir un tableau // Ici on assigne un nombre al\u00e9atoire de 0 \u00e0 100 pour chaque \u00e9l\u00e9ment du tableau Random rng = new Random(); int[] tab = new int[30]; for(int i = 0; i < tab.Length; i++) { tab[i] = rng.Next(0,101); }","title":"Utilisation avec les tableaux"},{"location":"github/","text":"Utilisation de Github avec Classroom dans le cadre du cours Il faut avoir Git install\u00e9 sur votre poste de travail avec la console Git (Git Bash) M\u00e9thode \u00e0 revoir","title":"GIthub"},{"location":"github/#utilisation-de-github-avec-classroom-dans-le-cadre-du-cours","text":"Il faut avoir Git install\u00e9 sur votre poste de travail avec la console Git (Git Bash)","title":"Utilisation de Github avec Classroom dans le cadre du cours"},{"location":"github/#methode-a-revoir","text":"","title":"M\u00e9thode \u00e0 revoir"},{"location":"lecture-ecriture/","text":"Lecture et \u00e9criture Affichage \u00e0 la console Console.WriteLine() // Afficher une phrase directement Console.WriteLine(\"Voici ma phrase\"); // Afficher le contenu d'une variable, m\u00eame si c'est autre chose qu'une phrase Console.WriteLine(maVariable); // Afficher une combinaison de variables et de phrases Console.WriteLine(\"Je crois que ma variable contient : \" + maVariable + \" un entier positif\" ); Lecture \u00e0 la console La m\u00e9thode Console.ReadLine() lit une entr\u00e9e de l'utilisateur \u00e0 la console mais il faut assigner le r\u00e9sultat \u00e0 une variable pour l'utiliser. Cette m\u00e9thode nous donne toujours un string Si on veut lire autre chose, il faudra le convertir dans le bon type par la suite! string valeurSaisie = \"\"; int valeur = 0; valeurSaisie = Console.ReadLine(); int.TryParse(valeurSaisie, out valeur);","title":"Lecture et \u00e9criture"},{"location":"lecture-ecriture/#lecture-et-ecriture","text":"","title":"Lecture et \u00e9criture"},{"location":"lecture-ecriture/#affichage-a-la-console","text":"Console.WriteLine() // Afficher une phrase directement Console.WriteLine(\"Voici ma phrase\"); // Afficher le contenu d'une variable, m\u00eame si c'est autre chose qu'une phrase Console.WriteLine(maVariable); // Afficher une combinaison de variables et de phrases Console.WriteLine(\"Je crois que ma variable contient : \" + maVariable + \" un entier positif\" );","title":"Affichage \u00e0 la console"},{"location":"lecture-ecriture/#lecture-a-la-console","text":"La m\u00e9thode Console.ReadLine() lit une entr\u00e9e de l'utilisateur \u00e0 la console mais il faut assigner le r\u00e9sultat \u00e0 une variable pour l'utiliser. Cette m\u00e9thode nous donne toujours un string Si on veut lire autre chose, il faudra le convertir dans le bon type par la suite! string valeurSaisie = \"\"; int valeur = 0; valeurSaisie = Console.ReadLine(); int.TryParse(valeurSaisie, out valeur);","title":"Lecture \u00e0 la console"},{"location":"methode/","text":"M\u00e9thodes Un m\u00e9thode est une s\u00e9rie d'instructions qui effectue une une t\u00e2che sp\u00e9cifique. Elle peut simplement ex\u00e9cuter les instructions mais elle peut aussi nous envoyer une r\u00e9sultat. La m\u00e9thode avec une valeur qui nous revient est une fonction. Par exemple : Console.Readline() nous renvoie un string La m\u00e9thode sans valeur de retour est une proc\u00e9dure : Console.WriteLine(monTexte) affiche mais nous n'avons pas de valeur \u00e0 assigner La m\u00e9thode Main Lorsque l'on cr\u00e9e un nouveau projet avec Visual Studio, il ajoute automatiquement un m\u00e9thode Main. Cette m\u00e9thode est ex\u00e9cut\u00e9e au d\u00e9marrage du programme. Elle contient toutes les instructions et les m\u00e9thodes personnalis\u00e9es du programmeur. using System; namespace ExercicesSemaine1 { internal class Program { static void Main(string[] args) { } } } D\u00e9claration Une m\u00e9thode est d\u00e9clar\u00e9e \u00e0 l'int\u00e9rieur d'une classe. Une m\u00e9thode est \u00e0 l'ext\u00e9rieur des autres m\u00e9thodes. Dans le programme principal, il faut toujours ajouter le mot cl\u00e9 static avant le type de la m\u00e9thode. Une m\u00e9thode commence par le type de retour, suivi de son nom et de parenth\u00e8ses. Quand une m\u00e9thode n'a pas de retour (de r\u00e9sultat) son type est void . Une m\u00e9thode a ses propres variables, elle ne peut pas utiliser les variables d'une autre m\u00e9thode directement. Une m\u00e9thode est une action, son nom est un verbe et commence par une minuscule Proc\u00e9dure : m\u00e9thode qui effectue un travail mais ne retourne pas de r\u00e9sultat using System; namespace ExercicesSemaine1 { internal class Program { static void Main(string[] args) { } // nouvelles m\u00e9thodes // m\u00e9thode qui effectue une t\u00e2che mais ne donne pas de r\u00e9sultat // static est avant le type puisqu'il s'agit du programme principal // la m\u00e9thode ne retourne pas de r\u00e9sultat donc son type est void static void afficherMessage() { string message = \"Bonjour\"; Console.WriteLine(message); } } } Fonction : m\u00e9thode qui retourne une r\u00e9sultat L'instruction pour renvoyer un r\u00e9sultat est : return . Pour utiliser le r\u00e9sultat d'une fonction on peut: Assigner le r\u00e9sultat \u00e0 une variable Utiliser la fonction \u00e0 la place d'une variable dans une instruction Quand une m\u00e9thode retourne un r\u00e9sultat il faut d\u00e9signer le type de retour dans sa d\u00e9claration using System; namespace ExercicesSemaine1 { internal class Program { static void Main(string[] args) { double moyenne = 0; // Assignation du r\u00e9sultat \u00e0 une variable moyenne = calculerMoyenne(); // Utilisation directe dans une instruction Console.WriteLine(calculerMoyenne()); } // nouvelles m\u00e9thodes // m\u00e9thode qui retourne un r\u00e9sultat // static est avant le type puisqu'il s'agit du programme principal // la m\u00e9thode retourne un r\u00e9sultat donc son type est le m\u00eame que le type de la valeur retourn\u00e9e static double calculerMoyenne() { double note1 = 66; double note2 = 95; double note3 = 78; double moyenne = 0; moyenne = (note1 + note2 + note3) / 3; return moyenne; } } } Param\u00e8tres de fonctions Les m\u00e9thodes sont toujours suivient de parenth\u00e8ses. Elles servent \u00e0 transmettre de l'information pour qu'elle puisse faire son travail. Par exemple, le contenu des prenth\u00e8ses dans Console.WriteLine(\"Mon message\") dit \u00e0 la m\u00e9thode quel message afficher. Ce qui est envoy\u00e9 \u00e0 la m\u00e9thode doit \u00eatre d\u00e9fini lors de la d\u00e9claration de la m\u00e9thode. Par exemple si une m\u00e9thode a besoin d'un nombre entier pour faire son travail la d\u00e9claration serait : static void maMethode(int nombreEntier) { // instructions } Quand on utilise la m\u00e9thode dans notre Main, on sera oblig\u00e9 de donner un nombre entier (ou une variable contenant un nombre enteir) \u00e0 la m\u00e9thode : // Exemple 1 maMethode(7); // Exemple 2 avec une variable int variable = 5; maMethode(variable); La valeur donn\u00e9e dans le main est copi\u00e9e dans la variable param\u00e8tre de la m\u00e9thode. D\u00e9claration d'une m\u00e9thode avec des param\u00e8tres static void calculerExposant(int nombre, int exposant) { int resultat = 0; resultat = Math.Pow(nombre, exposant); Console.WriteLine(\"R\u00e9sultat : \" + resultat); } Ici, les param\u00e8tres sont nombre et exposant, de type int Chacune des variables d\u00e9clar\u00e9e de cette fa\u00e7on sera utilisable uniquement dans la m\u00e9thode. Utilisation d'une m\u00e9thode avec param\u00e8tres On utilise une m\u00e9thode avec param\u00e8tres de la m\u00eame fa\u00e7on que les autre. Les param\u00e8tres sont s\u00e9par\u00e9s par des virgules. Il faut lui donner les param\u00e8tres dans l'ordre o\u00f9 ils ont \u00e9t\u00e9 d\u00e9clar\u00e9s. Si on utilise la m\u00e9thode pr\u00e9c\u00e9dente : calculerExposant(2, 5) Le r\u00e9sultat \u00e0 la console sera 32 calculerExposant(5, 2) Le r\u00e9sultat \u00e0 la console sera 25","title":"M\u00e9thodes"},{"location":"methode/#methodes","text":"Un m\u00e9thode est une s\u00e9rie d'instructions qui effectue une une t\u00e2che sp\u00e9cifique. Elle peut simplement ex\u00e9cuter les instructions mais elle peut aussi nous envoyer une r\u00e9sultat. La m\u00e9thode avec une valeur qui nous revient est une fonction. Par exemple : Console.Readline() nous renvoie un string La m\u00e9thode sans valeur de retour est une proc\u00e9dure : Console.WriteLine(monTexte) affiche mais nous n'avons pas de valeur \u00e0 assigner","title":"M\u00e9thodes"},{"location":"methode/#la-methode-main","text":"Lorsque l'on cr\u00e9e un nouveau projet avec Visual Studio, il ajoute automatiquement un m\u00e9thode Main. Cette m\u00e9thode est ex\u00e9cut\u00e9e au d\u00e9marrage du programme. Elle contient toutes les instructions et les m\u00e9thodes personnalis\u00e9es du programmeur. using System; namespace ExercicesSemaine1 { internal class Program { static void Main(string[] args) { } } }","title":"La m\u00e9thode Main"},{"location":"methode/#declaration","text":"Une m\u00e9thode est d\u00e9clar\u00e9e \u00e0 l'int\u00e9rieur d'une classe. Une m\u00e9thode est \u00e0 l'ext\u00e9rieur des autres m\u00e9thodes. Dans le programme principal, il faut toujours ajouter le mot cl\u00e9 static avant le type de la m\u00e9thode. Une m\u00e9thode commence par le type de retour, suivi de son nom et de parenth\u00e8ses. Quand une m\u00e9thode n'a pas de retour (de r\u00e9sultat) son type est void . Une m\u00e9thode a ses propres variables, elle ne peut pas utiliser les variables d'une autre m\u00e9thode directement. Une m\u00e9thode est une action, son nom est un verbe et commence par une minuscule","title":"D\u00e9claration"},{"location":"methode/#procedure-methode-qui-effectue-un-travail-mais-ne-retourne-pas-de-resultat","text":"using System; namespace ExercicesSemaine1 { internal class Program { static void Main(string[] args) { } // nouvelles m\u00e9thodes // m\u00e9thode qui effectue une t\u00e2che mais ne donne pas de r\u00e9sultat // static est avant le type puisqu'il s'agit du programme principal // la m\u00e9thode ne retourne pas de r\u00e9sultat donc son type est void static void afficherMessage() { string message = \"Bonjour\"; Console.WriteLine(message); } } }","title":"Proc\u00e9dure : m\u00e9thode qui effectue un travail mais ne retourne pas de r\u00e9sultat"},{"location":"methode/#fonction-methode-qui-retourne-une-resultat","text":"L'instruction pour renvoyer un r\u00e9sultat est : return . Pour utiliser le r\u00e9sultat d'une fonction on peut: Assigner le r\u00e9sultat \u00e0 une variable Utiliser la fonction \u00e0 la place d'une variable dans une instruction Quand une m\u00e9thode retourne un r\u00e9sultat il faut d\u00e9signer le type de retour dans sa d\u00e9claration using System; namespace ExercicesSemaine1 { internal class Program { static void Main(string[] args) { double moyenne = 0; // Assignation du r\u00e9sultat \u00e0 une variable moyenne = calculerMoyenne(); // Utilisation directe dans une instruction Console.WriteLine(calculerMoyenne()); } // nouvelles m\u00e9thodes // m\u00e9thode qui retourne un r\u00e9sultat // static est avant le type puisqu'il s'agit du programme principal // la m\u00e9thode retourne un r\u00e9sultat donc son type est le m\u00eame que le type de la valeur retourn\u00e9e static double calculerMoyenne() { double note1 = 66; double note2 = 95; double note3 = 78; double moyenne = 0; moyenne = (note1 + note2 + note3) / 3; return moyenne; } } }","title":"Fonction : m\u00e9thode qui retourne une r\u00e9sultat"},{"location":"methode/#parametres-de-fonctions","text":"Les m\u00e9thodes sont toujours suivient de parenth\u00e8ses. Elles servent \u00e0 transmettre de l'information pour qu'elle puisse faire son travail. Par exemple, le contenu des prenth\u00e8ses dans Console.WriteLine(\"Mon message\") dit \u00e0 la m\u00e9thode quel message afficher. Ce qui est envoy\u00e9 \u00e0 la m\u00e9thode doit \u00eatre d\u00e9fini lors de la d\u00e9claration de la m\u00e9thode. Par exemple si une m\u00e9thode a besoin d'un nombre entier pour faire son travail la d\u00e9claration serait : static void maMethode(int nombreEntier) { // instructions } Quand on utilise la m\u00e9thode dans notre Main, on sera oblig\u00e9 de donner un nombre entier (ou une variable contenant un nombre enteir) \u00e0 la m\u00e9thode : // Exemple 1 maMethode(7); // Exemple 2 avec une variable int variable = 5; maMethode(variable); La valeur donn\u00e9e dans le main est copi\u00e9e dans la variable param\u00e8tre de la m\u00e9thode.","title":"Param\u00e8tres de fonctions"},{"location":"methode/#declaration-dune-methode-avec-des-parametres","text":"static void calculerExposant(int nombre, int exposant) { int resultat = 0; resultat = Math.Pow(nombre, exposant); Console.WriteLine(\"R\u00e9sultat : \" + resultat); } Ici, les param\u00e8tres sont nombre et exposant, de type int Chacune des variables d\u00e9clar\u00e9e de cette fa\u00e7on sera utilisable uniquement dans la m\u00e9thode.","title":"D\u00e9claration d'une m\u00e9thode avec des param\u00e8tres"},{"location":"methode/#utilisation-dune-methode-avec-parametres","text":"On utilise une m\u00e9thode avec param\u00e8tres de la m\u00eame fa\u00e7on que les autre. Les param\u00e8tres sont s\u00e9par\u00e9s par des virgules. Il faut lui donner les param\u00e8tres dans l'ordre o\u00f9 ils ont \u00e9t\u00e9 d\u00e9clar\u00e9s. Si on utilise la m\u00e9thode pr\u00e9c\u00e9dente : calculerExposant(2, 5) Le r\u00e9sultat \u00e0 la console sera 32 calculerExposant(5, 2) Le r\u00e9sultat \u00e0 la console sera 25","title":"Utilisation d'une m\u00e9thode avec param\u00e8tres"},{"location":"operateurs/","text":"Op\u00e9rateurs Op\u00e9rateurs math\u00e9matiques Les calculs utilisent les m\u00eame op\u00e9rateurs qu'en math\u00e9matique On assigne le r\u00e9sultat \u00e0 une variable int total; total = 65 + 78 + 22; Les op\u00e9rateurs Addition : + Soustraction : - Multiplication : * (\u00e9toile) Division : / (barre oblique) Reste d'une division : % (ex: 13 % 5 = 3 parce que 13/5 = 2 et reste 3) Les priorit\u00e9s Certains op\u00e9rateurs passent en premier. Par exemple les multiplications se font avant les additions. 1 + 3 * 2 donne 7 parce que 3 * 2 passe avant 1 + 3 Si ce n'\u00e9tait pas d\u00e9fini on ne serait pas s\u00fbr du r\u00e9sultat! Pour sp\u00e9cifier qu'une partie est prioritaire il faut l'entourer avec des parenth\u00e8ses. (1 + 3) * 2 donne 8 parce qu'on force l'addition en premier avec les parenth\u00e8ses. En ordre de priorit\u00e9 : () *, /, % +, - Op\u00e9rateurs de comparaison Pour comparer 2 expression ces op\u00e9rateurs sont disponibles. Ils ont tous la m\u00eame priorit\u00e9 et passe apr\u00e8s tous les op\u00e9rateurs arithm\u00e9tiques \u00c9galit\u00e9 : == Diff\u00e9rent : != Plus petit / grand : < > Plus petit / grand ou \u00e9gal : <= >= Le r\u00e9sultat d'une comparaision donne une valeur logique, soit vrai ou faux. 3 == 4 donne faux 3 <= 4 donne vrai Op\u00e9rateurs logiques Selon les circonstances il sera n\u00e9cessaire de v\u00e9rifier le r\u00e9sultat de plusieurs comparaisons ou valeurs logiques (vrai ou faux). Par exemple : Pour conduire il faut avoir son permis et avoir une auto Au lieu de v\u00e9rifier ces deux conditions une apr\u00e8s l'autre on peut les v\u00e9rifier en m\u00eame temps avec l'op\u00e9rateur logique ET Les op\u00e9rateurs Ils sont plac\u00e9s en ordre de priorit\u00e9! Non (inverse la valeur logique) : ! vrai devient faux ET : && OU : || Exemple d'op\u00e9ration logique ET avec une condition if bool permis = vrai; bool automobile = vrai; bool peutConduire = faux; if(permis && automobile) { Console.Writeline(\"Tu peux conduire!\"); peutConduire = vrai; }","title":"Op\u00e9rateurs"},{"location":"operateurs/#operateurs","text":"","title":"Op\u00e9rateurs"},{"location":"operateurs/#operateurs-mathematiques","text":"Les calculs utilisent les m\u00eame op\u00e9rateurs qu'en math\u00e9matique On assigne le r\u00e9sultat \u00e0 une variable int total; total = 65 + 78 + 22;","title":"Op\u00e9rateurs math\u00e9matiques"},{"location":"operateurs/#les-operateurs","text":"Addition : + Soustraction : - Multiplication : * (\u00e9toile) Division : / (barre oblique) Reste d'une division : % (ex: 13 % 5 = 3 parce que 13/5 = 2 et reste 3)","title":"Les op\u00e9rateurs"},{"location":"operateurs/#les-priorites","text":"Certains op\u00e9rateurs passent en premier. Par exemple les multiplications se font avant les additions. 1 + 3 * 2 donne 7 parce que 3 * 2 passe avant 1 + 3 Si ce n'\u00e9tait pas d\u00e9fini on ne serait pas s\u00fbr du r\u00e9sultat! Pour sp\u00e9cifier qu'une partie est prioritaire il faut l'entourer avec des parenth\u00e8ses. (1 + 3) * 2 donne 8 parce qu'on force l'addition en premier avec les parenth\u00e8ses. En ordre de priorit\u00e9 : () *, /, % +, -","title":"Les priorit\u00e9s"},{"location":"operateurs/#operateurs-de-comparaison","text":"Pour comparer 2 expression ces op\u00e9rateurs sont disponibles. Ils ont tous la m\u00eame priorit\u00e9 et passe apr\u00e8s tous les op\u00e9rateurs arithm\u00e9tiques \u00c9galit\u00e9 : == Diff\u00e9rent : != Plus petit / grand : < > Plus petit / grand ou \u00e9gal : <= >= Le r\u00e9sultat d'une comparaision donne une valeur logique, soit vrai ou faux. 3 == 4 donne faux 3 <= 4 donne vrai","title":"Op\u00e9rateurs de comparaison"},{"location":"operateurs/#operateurs-logiques","text":"Selon les circonstances il sera n\u00e9cessaire de v\u00e9rifier le r\u00e9sultat de plusieurs comparaisons ou valeurs logiques (vrai ou faux). Par exemple : Pour conduire il faut avoir son permis et avoir une auto Au lieu de v\u00e9rifier ces deux conditions une apr\u00e8s l'autre on peut les v\u00e9rifier en m\u00eame temps avec l'op\u00e9rateur logique ET","title":"Op\u00e9rateurs logiques"},{"location":"operateurs/#les-operateurs_1","text":"Ils sont plac\u00e9s en ordre de priorit\u00e9! Non (inverse la valeur logique) : ! vrai devient faux ET : && OU : || Exemple d'op\u00e9ration logique ET avec une condition if bool permis = vrai; bool automobile = vrai; bool peutConduire = faux; if(permis && automobile) { Console.Writeline(\"Tu peux conduire!\"); peutConduire = vrai; }","title":"Les op\u00e9rateurs"},{"location":"si/","text":"Condition La condition est une instruction qui permet de contr\u00f4ler notre programe : Dans un jeu, si le joueur n'a plus de vie le jeu arr\u00eate Si je paie le caissier du Chic-Choco-Latt\u00e9, j'obtiens ma cr\u00e8me glac\u00e9\u00e9 Si le total de mon panier sur amazon.ca d\u00e9passe 75$ je n'ai pas de frais de livraison Le programme qui utilise un condition prend en fait une d\u00e9cision selon les donn\u00e9es L'instruction SI l'instruction SI ... ALORS ... SINON est utili\u00e9e pour la prise de d\u00e9cision SI ma condition est vraie ALORS faire les instructions du bloc 1 SINON faire les instructions du bloc 2 La partie SINON n'est pas obligatoire mais la plupart du temps n\u00e9cessaire pour le bon fonctionnement du programme. La condition doit avoir une valeur VRAI ou FAUX La condition est soit une variable de type bool, une compraison ou une combinaison de plusieurs bool/comparaisons. Syntaxe en C# // Instructions avant la prise de d\u00e9cision if(condition) { // Instructions si la condition est vraie } else { // Instruction si la condition est fausse } // Instructions apr\u00e8s la d\u00e9cision Exemples en C# string choix=\"\"; double prixSushis = 15.97; double total = 0.0; Console.WriteLine(\"Entrer le choix de menu : \"); choix = Console.ReadLine(); if(choix == \"Sushis\") { total = total + prixSushis } Console.WriteLine(\"Total : \" + total + \"$\"); int age = 0; Console.Writeline(\"Quel est votre \u00e2ge? \"); int.TryParse(Console.ReadLine(), out age); if(age > 18) { Console.WriteLine(\"Vous pouvez voter\"); } else { Console.WriteLine(\"Vous ne pouvez pas voter\"); } SINON SI Il est possible de prendre une d\u00e9cision plus complexe en comparant une variable avec plusieurs possibilit\u00e9s SI ma premi\u00e8re comparaison est vraie ALORS faire les instructions du bloc 1 SINON SI ma deuxi\u00e8me compraison est vraie ALORS faire les instructions du bloc 2 ... On peut en faire autant que l'on veut et finalement SINON faire les instruction quand je n'ai rien eu de vrai Syntaxe en C# // Instructions avant la prise de d\u00e9cision if(condition) { // Instructions si la condition 1 est vraie } else if(autre condition) { // Instruction si la condition 2 est vraie } ... else { // Instruction quand je n'ai trouv\u00e9 aucune conditioin vraie } // Instructions apr\u00e8s la d\u00e9cision Exemple en C# int nombre = 0; Console.WriteLine(\"Entrer le choix de menu : \"); int.TryParse(Console.ReadLine(), out nombre); if(nombre == 1) { Console.WriteLine(\"Vos Sushis seront livr\u00e9s bient\u00f4t\"); } else if(nombre == 2) { Console.WriteLine(\"Votre tartare sera livr\u00e9 bient\u00f4t\"); } else if(nombre == 3) { Console.WriteLine(\"Vos rouleaux de printemps seront livr\u00e9s bient\u00f4t\"); } else { Console.WriteLine(\"Choix non valide.\"); }","title":"Condition (if)"},{"location":"si/#condition","text":"La condition est une instruction qui permet de contr\u00f4ler notre programe : Dans un jeu, si le joueur n'a plus de vie le jeu arr\u00eate Si je paie le caissier du Chic-Choco-Latt\u00e9, j'obtiens ma cr\u00e8me glac\u00e9\u00e9 Si le total de mon panier sur amazon.ca d\u00e9passe 75$ je n'ai pas de frais de livraison Le programme qui utilise un condition prend en fait une d\u00e9cision selon les donn\u00e9es","title":"Condition"},{"location":"si/#linstruction-si","text":"l'instruction SI ... ALORS ... SINON est utili\u00e9e pour la prise de d\u00e9cision SI ma condition est vraie ALORS faire les instructions du bloc 1 SINON faire les instructions du bloc 2 La partie SINON n'est pas obligatoire mais la plupart du temps n\u00e9cessaire pour le bon fonctionnement du programme. La condition doit avoir une valeur VRAI ou FAUX La condition est soit une variable de type bool, une compraison ou une combinaison de plusieurs bool/comparaisons.","title":"L'instruction SI"},{"location":"si/#syntaxe-en-c","text":"// Instructions avant la prise de d\u00e9cision if(condition) { // Instructions si la condition est vraie } else { // Instruction si la condition est fausse } // Instructions apr\u00e8s la d\u00e9cision","title":"Syntaxe en C#"},{"location":"si/#exemples-en-c","text":"string choix=\"\"; double prixSushis = 15.97; double total = 0.0; Console.WriteLine(\"Entrer le choix de menu : \"); choix = Console.ReadLine(); if(choix == \"Sushis\") { total = total + prixSushis } Console.WriteLine(\"Total : \" + total + \"$\"); int age = 0; Console.Writeline(\"Quel est votre \u00e2ge? \"); int.TryParse(Console.ReadLine(), out age); if(age > 18) { Console.WriteLine(\"Vous pouvez voter\"); } else { Console.WriteLine(\"Vous ne pouvez pas voter\"); }","title":"Exemples en C#"},{"location":"si/#sinon-si","text":"Il est possible de prendre une d\u00e9cision plus complexe en comparant une variable avec plusieurs possibilit\u00e9s SI ma premi\u00e8re comparaison est vraie ALORS faire les instructions du bloc 1 SINON SI ma deuxi\u00e8me compraison est vraie ALORS faire les instructions du bloc 2 ... On peut en faire autant que l'on veut et finalement SINON faire les instruction quand je n'ai rien eu de vrai","title":"SINON SI"},{"location":"si/#syntaxe-en-c_1","text":"// Instructions avant la prise de d\u00e9cision if(condition) { // Instructions si la condition 1 est vraie } else if(autre condition) { // Instruction si la condition 2 est vraie } ... else { // Instruction quand je n'ai trouv\u00e9 aucune conditioin vraie } // Instructions apr\u00e8s la d\u00e9cision","title":"Syntaxe en C#"},{"location":"si/#exemple-en-c","text":"int nombre = 0; Console.WriteLine(\"Entrer le choix de menu : \"); int.TryParse(Console.ReadLine(), out nombre); if(nombre == 1) { Console.WriteLine(\"Vos Sushis seront livr\u00e9s bient\u00f4t\"); } else if(nombre == 2) { Console.WriteLine(\"Votre tartare sera livr\u00e9 bient\u00f4t\"); } else if(nombre == 3) { Console.WriteLine(\"Vos rouleaux de printemps seront livr\u00e9s bient\u00f4t\"); } else { Console.WriteLine(\"Choix non valide.\"); }","title":"Exemple en C#"},{"location":"solDnd/","text":"","title":"solDnd"},{"location":"solPendu/","text":"Solution possible au laboratoire : Jeu du pendu static void Main(string[] args) { Random random = new Random(); // Les mots pour deviner string[] mots = { \"boucle\", \"condition\", \"variable\" }; string mot = mots[random.Next(0, mots.Length)]; string motCache = \"\"; string lettre = \"\"; bool lettreDansMot = false; bool motDevine = false; int essai = 5; for (int i = 0; i < mot.Length; i++) { motCache += \"*\"; } // Afficher les instructions Console.WriteLine(\"Bienvenue au jeu du pendu, vous devez trouver toutes les lettres d'un mot au hasard. \\n\\n Chaque fois que vous choisissez une lettre : \\n - Les lettres sont affich\u00e9es \u00e0 la bonne place dans le mot cach\u00e9\\n ou \\n - Un essai de moins \\n\\n La partie est gagn\u00e9e quand toutes les lettre sont trouv\u00e9es\\n ou perdues quand il n'y a plus d'essai \\n Enter pour continuer.\"); Console.ReadLine(); // Choisir un mot \u00e0 deviner // Tant que je n'ai pas devin\u00e9 le mot et que j'ai des essais while(!motDevine && essai > 0) { // Demander \u00e0 l'utilisateur une lettre Console.Clear(); Console.WriteLine(\"Entrer une lettre :\"); lettre = Console.ReadLine(); // V\u00e9rifier si la lettre est dans le mot lettreDansMot = verifierSiLettreDansMot(mot, lettre); // Si la lettre est dans le mot if (lettreDansMot) { // Ajuster le mot cach\u00e9 motCache = ajusterMotCache(mot,motCache, lettre); } // Sinon perd un essai else { essai--; } // V\u00e9rifier si le mot est complet if (motCache == mot) { motDevine = true; } // Afficher r\u00e9sultat du tour Console.WriteLine(\"Mot : \" + motCache); Console.WriteLine(\"Essais restant : \" + essai); Console.WriteLine(\"Appuyer sur Entrer pour continuer.\"); Console.ReadLine(); } // Afficher le r\u00e9sultat if (motDevine) { Console.WriteLine(\"Gagn\u00e9!\"); } else { Console.WriteLine(\"Perdu...\"); } } static bool verifierSiLettreDansMot(string mot, string lettre) { bool present = false; for (int i = 0; i < mot.Length; i++) { if (mot[i] == lettre[0]) { present = true; } } return present; } static string ajusterMotCache(string mot, string motCache, string lettre) { string nouveauMotCache = \"\"; for (int i = 0; i < mot.Length; i++) { if (mot[i] == lettre[0]) { nouveauMotCache += lettre[0]; } else { nouveauMotCache += motCache[i]; } } return nouveauMotCache; }","title":"Pendu"},{"location":"solPendu/#solution-possible-au-laboratoire-jeu-du-pendu","text":"static void Main(string[] args) { Random random = new Random(); // Les mots pour deviner string[] mots = { \"boucle\", \"condition\", \"variable\" }; string mot = mots[random.Next(0, mots.Length)]; string motCache = \"\"; string lettre = \"\"; bool lettreDansMot = false; bool motDevine = false; int essai = 5; for (int i = 0; i < mot.Length; i++) { motCache += \"*\"; } // Afficher les instructions Console.WriteLine(\"Bienvenue au jeu du pendu, vous devez trouver toutes les lettres d'un mot au hasard. \\n\\n Chaque fois que vous choisissez une lettre : \\n - Les lettres sont affich\u00e9es \u00e0 la bonne place dans le mot cach\u00e9\\n ou \\n - Un essai de moins \\n\\n La partie est gagn\u00e9e quand toutes les lettre sont trouv\u00e9es\\n ou perdues quand il n'y a plus d'essai \\n Enter pour continuer.\"); Console.ReadLine(); // Choisir un mot \u00e0 deviner // Tant que je n'ai pas devin\u00e9 le mot et que j'ai des essais while(!motDevine && essai > 0) { // Demander \u00e0 l'utilisateur une lettre Console.Clear(); Console.WriteLine(\"Entrer une lettre :\"); lettre = Console.ReadLine(); // V\u00e9rifier si la lettre est dans le mot lettreDansMot = verifierSiLettreDansMot(mot, lettre); // Si la lettre est dans le mot if (lettreDansMot) { // Ajuster le mot cach\u00e9 motCache = ajusterMotCache(mot,motCache, lettre); } // Sinon perd un essai else { essai--; } // V\u00e9rifier si le mot est complet if (motCache == mot) { motDevine = true; } // Afficher r\u00e9sultat du tour Console.WriteLine(\"Mot : \" + motCache); Console.WriteLine(\"Essais restant : \" + essai); Console.WriteLine(\"Appuyer sur Entrer pour continuer.\"); Console.ReadLine(); } // Afficher le r\u00e9sultat if (motDevine) { Console.WriteLine(\"Gagn\u00e9!\"); } else { Console.WriteLine(\"Perdu...\"); } } static bool verifierSiLettreDansMot(string mot, string lettre) { bool present = false; for (int i = 0; i < mot.Length; i++) { if (mot[i] == lettre[0]) { present = true; } } return present; } static string ajusterMotCache(string mot, string motCache, string lettre) { string nouveauMotCache = \"\"; for (int i = 0; i < mot.Length; i++) { if (mot[i] == lettre[0]) { nouveauMotCache += lettre[0]; } else { nouveauMotCache += motCache[i]; } } return nouveauMotCache; }","title":"Solution possible au laboratoire : Jeu du pendu"},{"location":"solSem1/","text":"Solutions possibles aux exercices de la semaine 1 static void exercice1() { // On a besion de la largeur et de la longueur du rectangle // et de 2 autres variables pour leur assigner les r\u00e9sultats les r\u00e9sultats int largeur = 0; int longueur = 0; int permietre = 0; int aire = 0; // Saisie de la largeur et de la longueur Console.WriteLine(\"Largeur : \"); int.TryParse(Console.ReadLine(), out largeur); Console.WriteLine(\"Longueur : \"); int.TryParse(Console.ReadLine(), out longueur); // Calcul de l'aire et du p\u00e9rim\u00e8tre permietre = (largeur + longueur) * 2; aire = largeur * longueur; // Affichage des r\u00e9sultats Console.WriteLine(\"P\u00e9rim\u00e8tre : \" + permietre); Console.WriteLine(\"Aire : \" + aire); } static void exercice2() { // On a besoin de savoir combien de bitcoins l'utilisateur poss\u00e8de // Une variable pour le taux de conversion // Une variable pour lui assigner le r\u00e9sultat de la conversion double bitcoin = 0; double tauxEchange = 62315.32; double valeurDollar = 0; // Saisie du nombre de bitcoins Console.WriteLine(\"Combien de Bitcoins? : \"); double.TryParse(Console.ReadLine(), out bitcoin); // Calcul de la valeur en $ CAD valeurDollar = bitcoin * tauxEchange; // Affichage du r\u00e9sultat Console.WriteLine(\"Vous avez : \" + valeurDollar + \"$ CAD en Bitcoins\"); } static void exercice3() { // On a besoin de variables pour // les heures travaill\u00e9es // le salaire horaire // le salaire brut annuel double heuresSemaine = 0; double salaireHoraire = 0; double salaireBrutAnnuel = 0; // Saisie des heures et du salaire Console.WriteLine(\"Heures travaill\u00e9es par semaine : \"); double.TryParse(Console.ReadLine(), out heuresSemaine); Console.WriteLine(\"Salaire horaire : \"); double.TryParse(Console.ReadLine(), out salaireHoraire); // Calcul du salaire annuel salaireBrutAnnuel = heuresSemaine * salaireHoraire * 52; // Affichage du salaire brut annuel Console.WriteLine(\"Salaire brut annuel : \" + salaireBrutAnnuel + \"$\"); } static void exercice4() { // 3 variables, 1 pour chaque nombre et 1 variable temporaire pour ne pas perdre de valeur int a = 0; int b = 0; int temp = 0; // Saisie Console.WriteLine(\"Variable a : \"); int.TryParse(Console.ReadLine(), out a); Console.WriteLine(\"Variable b : \"); int.TryParse(Console.ReadLine(), out b); // \u00c9change temp = a; a = b; b = temp; // Affichage Console.WriteLine(\"Apr\u00e8s \u00e9change. a = \" + a + \" :: b = \" + b); } static void exercice5() { // Variables pour les 2 nombres int nombre1 = 0; int nombre2 = 0; // Saisie des nombres Console.WriteLine(\"Entrer le 1er nombre : \"); int.TryParse(Console.ReadLine(), out nombre1); Console.WriteLine(\"Entrer le 2\u00e8me nombre : \"); int.TryParse(Console.ReadLine(), out nombre2); // Comparaison avec test d'\u00e9galit\u00e9 suppl\u00e9mentaire // Affichage dans le bloc d'instructions directement // Si le nombre 1 est plus grand, afficher ce nombre if (nombre1 > nombre2) { Console.WriteLine(\"Le nombre 1 : \" + nombre1 + \" est plus grand que le deuxi\u00e8me : \" + nombre2); } // Sinon si le nombre 2 est plus grand, afficher ce nombre else if (nombre2 > nombre1) { Console.WriteLine(\"Le nombre 2 : \" + nombre2 + \" est plus grand que le premier : \" + nombre1); } // Sinon ils sont \u00e9gaux else { Console.WriteLine(\"Les 2 nombres sont \u00e9gaux : \" + nombre1); } } static void exercice6() { // Variables pour les statistiques et le type double force = 0; double agilite = 0; string type = \"feu\"; // Saisie du type Console.WriteLine(\"Type feu ou eau? : \"); type = Console.ReadLine(); // Calcul des stats finales selon le type // On pourrait v\u00e9rifier que l'utilisateur entre un des bons choix avec else if if (type == \"feu\") { force = force * 1.1; agilite = agilite * 0.85; } else { force = force * 0.9; agilite = agilite * 1.15; } // Affichage des stats finales Console.WriteLine(\"Votre type : \" + type + \". Agilite : \" + agilite + \" :: Force : \" + force); } static void exercice7() { // 3 variables : base, exposant, resultat // on prend le nom nomnbre pour la base pcq le mot base est une instruction en C# int nombre = 0; int exposant = 0; int resultat = 0; // Saisie des valeurs \u00e0 la console Console.WriteLine(\"Entrer le nombre : \"); int.TryParse(Console.ReadLine(), out nombre); Console.WriteLine(\"Entrer l'exposant : \"); int.TryParse(Console.ReadLine(), out exposant); // D\u00e9terminer et afficher le r\u00e9sultat if (exposant < 0) { Console.WriteLine(\"Je ne peux pas traiter les exposants n\u00e9gatifs\"); } else if (exposant == 0) { Console.WriteLine(\"R\u00e9sultat : 1\"); } else if (exposant == 1) { resultat = nombre; Console.WriteLine(\"R\u00e9sultat : \" + resultat); } else if (exposant == 2) { resultat = nombre * nombre; Console.WriteLine(\"R\u00e9sultat : \" + resultat); } else if (exposant == 3) { resultat = nombre * nombre * nombre; Console.WriteLine(\"R\u00e9sultat : \" + resultat); } else { Console.WriteLine(\"Attends un peu, je vais voir les boucles la semaine prochaine\"); } }","title":"Semaine 1"},{"location":"solSem1/#solutions-possibles-aux-exercices-de-la-semaine-1","text":"static void exercice1() { // On a besion de la largeur et de la longueur du rectangle // et de 2 autres variables pour leur assigner les r\u00e9sultats les r\u00e9sultats int largeur = 0; int longueur = 0; int permietre = 0; int aire = 0; // Saisie de la largeur et de la longueur Console.WriteLine(\"Largeur : \"); int.TryParse(Console.ReadLine(), out largeur); Console.WriteLine(\"Longueur : \"); int.TryParse(Console.ReadLine(), out longueur); // Calcul de l'aire et du p\u00e9rim\u00e8tre permietre = (largeur + longueur) * 2; aire = largeur * longueur; // Affichage des r\u00e9sultats Console.WriteLine(\"P\u00e9rim\u00e8tre : \" + permietre); Console.WriteLine(\"Aire : \" + aire); } static void exercice2() { // On a besoin de savoir combien de bitcoins l'utilisateur poss\u00e8de // Une variable pour le taux de conversion // Une variable pour lui assigner le r\u00e9sultat de la conversion double bitcoin = 0; double tauxEchange = 62315.32; double valeurDollar = 0; // Saisie du nombre de bitcoins Console.WriteLine(\"Combien de Bitcoins? : \"); double.TryParse(Console.ReadLine(), out bitcoin); // Calcul de la valeur en $ CAD valeurDollar = bitcoin * tauxEchange; // Affichage du r\u00e9sultat Console.WriteLine(\"Vous avez : \" + valeurDollar + \"$ CAD en Bitcoins\"); } static void exercice3() { // On a besoin de variables pour // les heures travaill\u00e9es // le salaire horaire // le salaire brut annuel double heuresSemaine = 0; double salaireHoraire = 0; double salaireBrutAnnuel = 0; // Saisie des heures et du salaire Console.WriteLine(\"Heures travaill\u00e9es par semaine : \"); double.TryParse(Console.ReadLine(), out heuresSemaine); Console.WriteLine(\"Salaire horaire : \"); double.TryParse(Console.ReadLine(), out salaireHoraire); // Calcul du salaire annuel salaireBrutAnnuel = heuresSemaine * salaireHoraire * 52; // Affichage du salaire brut annuel Console.WriteLine(\"Salaire brut annuel : \" + salaireBrutAnnuel + \"$\"); } static void exercice4() { // 3 variables, 1 pour chaque nombre et 1 variable temporaire pour ne pas perdre de valeur int a = 0; int b = 0; int temp = 0; // Saisie Console.WriteLine(\"Variable a : \"); int.TryParse(Console.ReadLine(), out a); Console.WriteLine(\"Variable b : \"); int.TryParse(Console.ReadLine(), out b); // \u00c9change temp = a; a = b; b = temp; // Affichage Console.WriteLine(\"Apr\u00e8s \u00e9change. a = \" + a + \" :: b = \" + b); } static void exercice5() { // Variables pour les 2 nombres int nombre1 = 0; int nombre2 = 0; // Saisie des nombres Console.WriteLine(\"Entrer le 1er nombre : \"); int.TryParse(Console.ReadLine(), out nombre1); Console.WriteLine(\"Entrer le 2\u00e8me nombre : \"); int.TryParse(Console.ReadLine(), out nombre2); // Comparaison avec test d'\u00e9galit\u00e9 suppl\u00e9mentaire // Affichage dans le bloc d'instructions directement // Si le nombre 1 est plus grand, afficher ce nombre if (nombre1 > nombre2) { Console.WriteLine(\"Le nombre 1 : \" + nombre1 + \" est plus grand que le deuxi\u00e8me : \" + nombre2); } // Sinon si le nombre 2 est plus grand, afficher ce nombre else if (nombre2 > nombre1) { Console.WriteLine(\"Le nombre 2 : \" + nombre2 + \" est plus grand que le premier : \" + nombre1); } // Sinon ils sont \u00e9gaux else { Console.WriteLine(\"Les 2 nombres sont \u00e9gaux : \" + nombre1); } } static void exercice6() { // Variables pour les statistiques et le type double force = 0; double agilite = 0; string type = \"feu\"; // Saisie du type Console.WriteLine(\"Type feu ou eau? : \"); type = Console.ReadLine(); // Calcul des stats finales selon le type // On pourrait v\u00e9rifier que l'utilisateur entre un des bons choix avec else if if (type == \"feu\") { force = force * 1.1; agilite = agilite * 0.85; } else { force = force * 0.9; agilite = agilite * 1.15; } // Affichage des stats finales Console.WriteLine(\"Votre type : \" + type + \". Agilite : \" + agilite + \" :: Force : \" + force); } static void exercice7() { // 3 variables : base, exposant, resultat // on prend le nom nomnbre pour la base pcq le mot base est une instruction en C# int nombre = 0; int exposant = 0; int resultat = 0; // Saisie des valeurs \u00e0 la console Console.WriteLine(\"Entrer le nombre : \"); int.TryParse(Console.ReadLine(), out nombre); Console.WriteLine(\"Entrer l'exposant : \"); int.TryParse(Console.ReadLine(), out exposant); // D\u00e9terminer et afficher le r\u00e9sultat if (exposant < 0) { Console.WriteLine(\"Je ne peux pas traiter les exposants n\u00e9gatifs\"); } else if (exposant == 0) { Console.WriteLine(\"R\u00e9sultat : 1\"); } else if (exposant == 1) { resultat = nombre; Console.WriteLine(\"R\u00e9sultat : \" + resultat); } else if (exposant == 2) { resultat = nombre * nombre; Console.WriteLine(\"R\u00e9sultat : \" + resultat); } else if (exposant == 3) { resultat = nombre * nombre * nombre; Console.WriteLine(\"R\u00e9sultat : \" + resultat); } else { Console.WriteLine(\"Attends un peu, je vais voir les boucles la semaine prochaine\"); } }","title":"Solutions possibles aux exercices de la semaine 1"},{"location":"solSem2/","text":"Solutions possibles aux exercices de la semaine 2 static void ex1() { int nombre = 0; // Saisir un nombre \u00e0 la console et le convertir en entier Console.WriteLine(\"Entrer un nombre pour le compte \u00e0 rebours : \"); int.TryParse(Console.ReadLine(), out nombre); // descendre le nombre jusqu'\u00e0 0 // pour arr\u00eater \u00e0 1 on utilise la condition : nombre > 0 while (nombre >= 0) { Console.WriteLine(nombre); nombre--; } } static void ex2() { int nombre = 1; // le nombre que l'utilisateur entre \u00e0 chaque tour de boucle, on le met \u00e0 1 pour que la boucle commence int positif = 0; // le compteur de nombres positifs int negatif = 0; // le compteur de nombres n\u00e9gatifs // \u00c0 chaque tour de boucle on saisit un nombre // Si il est positif on augmente le compteur positif de 1 // Sinon si il est n\u00e9gatif on augmente le compteur n\u00e9gatif de 1 // La boucle arr\u00eate quand l'utilisateur entre 0 parce que 0 != 0 est FAUX while (nombre != 0) { Console.WriteLine(\"Entrer une nombre entier (0 pour arr\u00eater) : \"); int.TryParse(Console.ReadLine(), out nombre); if (nombre > 0) { positif++; } else if (nombre < 0) { negatif++; } } Console.WriteLine(\"Nombres positifs : \" + positif); Console.WriteLine(\"Nombres n\u00e9gatifs : \" + negatif); } static void ex3() { double note = 0; double total = 0; int nbNotes = 0; double moyenne = 0; while (note >= 0) { Console.WriteLine(\"Entre une note (note n\u00e9gative pour arr\u00eater) \"); double.TryParse(Console.ReadLine(), out note); // Seulement si on a une note positive // Ajuster le total // Ajuster le nombre de notes entr\u00e9es if (note >= 0) { total = total + note; nbNotes++; } } moyenne = total / nbNotes; Console.WriteLine(\"Nombre de notes : \" + nbNotes + \", Moyenne : \" + moyenne); }","title":"Semaine 2"},{"location":"solSem2/#solutions-possibles-aux-exercices-de-la-semaine-2","text":"static void ex1() { int nombre = 0; // Saisir un nombre \u00e0 la console et le convertir en entier Console.WriteLine(\"Entrer un nombre pour le compte \u00e0 rebours : \"); int.TryParse(Console.ReadLine(), out nombre); // descendre le nombre jusqu'\u00e0 0 // pour arr\u00eater \u00e0 1 on utilise la condition : nombre > 0 while (nombre >= 0) { Console.WriteLine(nombre); nombre--; } } static void ex2() { int nombre = 1; // le nombre que l'utilisateur entre \u00e0 chaque tour de boucle, on le met \u00e0 1 pour que la boucle commence int positif = 0; // le compteur de nombres positifs int negatif = 0; // le compteur de nombres n\u00e9gatifs // \u00c0 chaque tour de boucle on saisit un nombre // Si il est positif on augmente le compteur positif de 1 // Sinon si il est n\u00e9gatif on augmente le compteur n\u00e9gatif de 1 // La boucle arr\u00eate quand l'utilisateur entre 0 parce que 0 != 0 est FAUX while (nombre != 0) { Console.WriteLine(\"Entrer une nombre entier (0 pour arr\u00eater) : \"); int.TryParse(Console.ReadLine(), out nombre); if (nombre > 0) { positif++; } else if (nombre < 0) { negatif++; } } Console.WriteLine(\"Nombres positifs : \" + positif); Console.WriteLine(\"Nombres n\u00e9gatifs : \" + negatif); } static void ex3() { double note = 0; double total = 0; int nbNotes = 0; double moyenne = 0; while (note >= 0) { Console.WriteLine(\"Entre une note (note n\u00e9gative pour arr\u00eater) \"); double.TryParse(Console.ReadLine(), out note); // Seulement si on a une note positive // Ajuster le total // Ajuster le nombre de notes entr\u00e9es if (note >= 0) { total = total + note; nbNotes++; } } moyenne = total / nbNotes; Console.WriteLine(\"Nombre de notes : \" + nbNotes + \", Moyenne : \" + moyenne); }","title":"Solutions possibles aux exercices de la semaine 2"},{"location":"solSem4a/","text":"Solutions possibles aux exercices de la semaine 4 static void ex1() { for (int i = 0; i < 15; i++) { Console.WriteLine(\"ATTENTION!\"); } } static void ex2() { for (int i = 1; i < 11; i++) { Console.WriteLine(\"Nombre : \" + i + \" Carr\u00e9 : \" + i * i + \" Cube : \" + i * i * i); } } static void ex3() { double clesius = 0.0; for (int farenheit = -40; farenheit <= 40; farenheit = farenheit + 5) { clesius = 5.0 / 9.0 * (farenheit - 32.0); Console.WriteLine(clesius); } } static void ex4() { double montant = 5.0; for (int i = 1; i <= 20; i++) { Console.WriteLine(\"Montant : \" + montant * i + \" Taxe : \" + montant * i * 0.15); } } static void ex5() { double total = 0.01; for (int i = 0; i < 30; i++) { total *= 2; } Console.WriteLine(total + \"$ est mieux que 1M$\"); } static void ex6() { for (int i = 1; i < 50; i += 2) { Console.WriteLine(i); } } static void ex7() { int nbParLigne = 0; for (int i = 1; i < 50; i += 2) { Console.Write(i); nbParLigne++; if (nbParLigne == 5) { Console.WriteLine(); } } } static void ex8a() { // option 1 string affichage = \"\"; for (int i = 0; i < 4; i++) { affichage += \"#\"; Console.WriteLine(affichage); } // option 2 for (int i = 1; i <= 4; i++) { for (int j = 0; j < i; j++) { Console.Write(\"#\"); } Console.WriteLine(); } } static void ex8b() { // option 1 string affichage = \"\"; for (int i = 1; i <= 4; i++) { affichage += i; Console.WriteLine(affichage); } // option 2 for (int i = 1; i <= 4; i++) { for (int j = 1; j <= i; j++) { Console.Write(j); } Console.WriteLine(); } } static void ex8c() { for (int i = 0; i < 4; i++) { for (int j = 0; j < 4 - i; j++) { Console.Write(\"#\"); } Console.WriteLine(); } } static void ex8d() { int nb = 0; for (int i = 0; i < 4; i++) { for (int j = 0; j <= i; j++) { nb++; Console.Write(nb); } Console.WriteLine(); } } static void ex8e() { int nbParLigne = 0; for (int i = 1; i < 10; i++) { Console.WriteLine(i); nbParLigne++; if (nbParLigne == 3) { Console.WriteLine(); } } }","title":"Semaine 4"},{"location":"solSem4a/#solutions-possibles-aux-exercices-de-la-semaine-4","text":"static void ex1() { for (int i = 0; i < 15; i++) { Console.WriteLine(\"ATTENTION!\"); } } static void ex2() { for (int i = 1; i < 11; i++) { Console.WriteLine(\"Nombre : \" + i + \" Carr\u00e9 : \" + i * i + \" Cube : \" + i * i * i); } } static void ex3() { double clesius = 0.0; for (int farenheit = -40; farenheit <= 40; farenheit = farenheit + 5) { clesius = 5.0 / 9.0 * (farenheit - 32.0); Console.WriteLine(clesius); } } static void ex4() { double montant = 5.0; for (int i = 1; i <= 20; i++) { Console.WriteLine(\"Montant : \" + montant * i + \" Taxe : \" + montant * i * 0.15); } } static void ex5() { double total = 0.01; for (int i = 0; i < 30; i++) { total *= 2; } Console.WriteLine(total + \"$ est mieux que 1M$\"); } static void ex6() { for (int i = 1; i < 50; i += 2) { Console.WriteLine(i); } } static void ex7() { int nbParLigne = 0; for (int i = 1; i < 50; i += 2) { Console.Write(i); nbParLigne++; if (nbParLigne == 5) { Console.WriteLine(); } } } static void ex8a() { // option 1 string affichage = \"\"; for (int i = 0; i < 4; i++) { affichage += \"#\"; Console.WriteLine(affichage); } // option 2 for (int i = 1; i <= 4; i++) { for (int j = 0; j < i; j++) { Console.Write(\"#\"); } Console.WriteLine(); } } static void ex8b() { // option 1 string affichage = \"\"; for (int i = 1; i <= 4; i++) { affichage += i; Console.WriteLine(affichage); } // option 2 for (int i = 1; i <= 4; i++) { for (int j = 1; j <= i; j++) { Console.Write(j); } Console.WriteLine(); } } static void ex8c() { for (int i = 0; i < 4; i++) { for (int j = 0; j < 4 - i; j++) { Console.Write(\"#\"); } Console.WriteLine(); } } static void ex8d() { int nb = 0; for (int i = 0; i < 4; i++) { for (int j = 0; j <= i; j++) { nb++; Console.Write(nb); } Console.WriteLine(); } } static void ex8e() { int nbParLigne = 0; for (int i = 1; i < 10; i++) { Console.WriteLine(i); nbParLigne++; if (nbParLigne == 3) { Console.WriteLine(); } } }","title":"Solutions possibles aux exercices de la semaine 4"},{"location":"solSem5/","text":"// \u00c9crire une m\u00e9thode qui lit la taille d'un utilisateur et dit s'il est petit, moyen, ou grand // petit : moins de 1,70m // moyen : de 1,70m \u00e0 1,82m // grand : plus de 1,82m static void ex1() { double taille = 0.0; Console.WriteLine(\"Entrez votre taille : \"); double.TryParse(Console.ReadLine(), out taille); if (taille < 1.70) { Console.WriteLine(\"Petit\"); } else if (taille < 1.83) { Console.WriteLine(\"Moyen\"); } else if (taille > 1.82) { Console.WriteLine(\"Grand\"); } } // \u00c9crire la m\u00e9thode qui trouve le plus grand de trois nombres entr\u00e9s \u00e0 la console static void ex2() { int nb1 = 0; int nb2 = 0; int nb3 = 0; Console.WriteLine(\"Entrer 3 nombres\"); int.TryParse(Console.ReadLine(), out nb1); int.TryParse(Console.ReadLine(), out nb2); int.TryParse(Console.ReadLine(), out nb3); if (nb1 > nb2) { if (nb1 > nb3) { Console.WriteLine(nb1 + \" est le plus grand\"); } else { Console.WriteLine(nb3 + \" est le plus grand\"); } } else { if (nb2 > nb3) { Console.WriteLine(nb2 + \" est le plus grand\"); } else { Console.WriteLine(nb3 + \" est le plus grand\"); } } } // \u00c0 partir des angles internes d'un triangle d\u00e9terminer si le triangle est valide ou non // La somme des angles d'un triangle est toujours 180 degr\u00e9s static void ex3() { int angle1 = 0; int angle2 = 0; int angle3 = 0; Console.WriteLine(\"Entrer les 3 angles du triangle\"); if ((angle1 + angle2 + angle3) == 180) { Console.WriteLine(\"Triangle valide\"); } else { Console.WriteLine(\"Pas un triangle\"); } } // Saisir la longueur des 3 c\u00f4t\u00e9s d'un triangle (a, b et c) // \u00c0 partir des informations d\u00e9terminer si le triangle est // \u00c9quilat\u00e9ral : tous les c\u00f4t\u00e9s ont la m\u00eame longueur // Isoc\u00e8le : 2 c\u00f4t\u00e9s \u00e9gaux // Scal\u00e8ne : aucun c\u00f4t\u00e9 n'est \u00e9gal static void ex4() { int a = 0; int b = 0; int c = 0; Console.WriteLine(\"Entrer la longueur des c\u00f4t\u00e9s du triangle\"); int.TryParse(Console.ReadLine(), out a); int.TryParse(Console.ReadLine(), out b); int.TryParse(Console.ReadLine(), out c); if (a == b) { if (b == c) { Console.WriteLine(\"\u00c9quilat\u00e9ral\"); } else { Console.WriteLine(\"Isoc\u00e8le\"); } } else { if (b == c) { Console.WriteLine(\"Isoc\u00e8le\"); } else { Console.WriteLine(\"Scal\u00e8ne\"); } } } // \u00c0 partir des informations fournies par l'utilisateur calculer la facture du mois pour sa consommation d'\u00e9lectricit\u00e9 // Frais d'acc\u00e8s au r\u00e9seau par jour : 0.42238$ // Jusqu'\u00e0 40kWh par jour pour le total des jours (ex: 30 jours = 1200kWh) : 0.06319$ par kWh // kWh suppl\u00e9mentaires : 0.09749$ par kWh static void ex5() { int nombreJours = 0; double kWh = 0.0; double seuil = 0.0; double acces = 0.0; double total = 0.0; Console.WriteLine(\"Combien de jours : \"); int.TryParse(Console.ReadLine(), out nombreJours); Console.WriteLine(\"Combien de kWh : \"); double.TryParse(Console.ReadLine(), out kWh); seuil = nombreJours * 40; acces = nombreJours * 0.42238; total = total + acces; if (kWh < seuil) { total = total + kWh * 0.06319; } else { total = total + seuil * 0.06319; total = total + (kWh - seuil) * 0.09749; } } // Jeux pair ou impair // Le premier joueur choisi 0 ou 1 // Le premier joueur choisi pair ou impair // On efface la console // Le deuxi\u00e8me joueur choisi 0 ou 1 // On affiche le gagnant selon la somme des deux nombres // Si la sommme correspond au type de r\u00e9sultat choisi par le premier joueur (pair ou impair) il a gagn\u00e9 // Sinon le 2\u00e8me joueur a gagn\u00e9 static void ex6() { int nbJoueur1 = 0; int nbJoueur2 = 0; string pairImpair = \"pair\"; Console.WriteLine(\"Joueur 1 choisi 1 ou 0\"); int.TryParse(Console.ReadLine(), out nbJoueur1); Console.WriteLine(\"Joueur 1 choisi pair/impair\"); pairImpair = Console.ReadLine(); Console.Clear(); Console.WriteLine(\"Joueur 2 choisi 1 ou 0\"); int.TryParse(Console.ReadLine(), out nbJoueur2); Console.Clear(); if ((nbJoueur1 + nbJoueur2) % 2 == 0) { if (pairImpair == \"pair\") { Console.WriteLine(\"Joueur 1 gagne!\"); } else { Console.WriteLine(\"Joueur 2 gagne!\"); } } else { if (pairImpair == \"impair\") { Console.WriteLine(\"Joueur 1 gagne!\"); } else { Console.WriteLine(\"Joueur 2 gagne!\"); } } } // Pour \u00eatre admis en m\u00e9decine il faut // Une cote R au-dessus de 33.0 // Une note sup\u00e9rieure \u00e0 70% en biologie, chimie et math\u00e9matiques // Une moyenne sup\u00e9rieure \u00e0 80% pour les 3 cours pr\u00e9c\u00e9dents // \u00c9crire le programme qui d\u00e9termine si l'utilisateur est \u00e9ligible static void ex7() { double coteR = 0.0; double bio = 0.0; double chimie = 0.0; double math = 0.0; double moyenne = 0.0; bool admissible = true; Console.WriteLine(\"Entrer la cote R\"); double.TryParse(Console.ReadLine(), out coteR); Console.WriteLine(\"Entrer la note de biologie\"); double.TryParse(Console.ReadLine(), out bio); Console.WriteLine(\"Entrer la note de chimie\"); double.TryParse(Console.ReadLine(), out chimie); Console.WriteLine(\"Entrer la note de math\"); double.TryParse(Console.ReadLine(), out math); moyenne = (bio + chimie + math) / 3; if (coteR < 33.0) { admissible = false; } else if (moyenne < 80.0) { admissible = false; } else { if (bio < 70.0) { admissible = false; } if (chimie < 70.0) { admissible = false; } if (math < 70.0) { admissible = false; } } if (admissible) { Console.WriteLine(\"Tu peux aller en m\u00e9decine\"); } else { Console.WriteLine(\"Tu devras te contenter d'attendre \u00e0 l'urgence\"); } }","title":"Semaine 5"},{"location":"string/","text":"Op\u00e9rations avec les cha\u00eenes de caract\u00e8res (string) Concat\u00e9nation : Combiner plusieurs cha\u00eenes avec l'op\u00e9rateur + Exemples de concat\u00e9nation string nom = \"Smith\"; string prenom = \"Jean\"; string nomComplet = \"\"; nomComplet = prenom + \" \" + nom; Construire une phrase selon des conditions En utilisant la concat\u00e9nation il est possible de configurer un message variable \u00e0 l'utilisateur string facture = \"\"; string choix = \"\"; Console.WriteLine(\"Ajouter un contr\u00f4leur (1)Pi ou (2)Pi z\u00e9ro); choix = Console.ReadLine(); if(choix == \"1\") { facture = facture + \"Contr\u00f4ler Pi, \"; } else { facture = facture + \"Contr\u00f4leur Pi z\u00e9ro, \"; } Console.WriteLine(\"Matrice de LEDS? o/n\"); choix = Console.ReadLine(); if(choix == \"o\") { facture = facture + \"Matrice de LEDS, \"; } Mettre des variables dans une cha\u00eene de caract\u00e8res La m\u00e9thode Console.WriteLine accepte d'ajouter des variables dans un texte avec l'op\u00e9rateur + Cette fa\u00e7on peut devenir difficile \u00e0 lire, il existe aussi le formattage au moyen du $ ou de la m\u00e9thode string.Format(); Formattage avec $ En mettant $ devant les \"\" on peut introduire une variable dans notre ch\u00e2ine de caract\u00e8re directement; string nom = \"Pierre Paul\"; string message = $\"Bonjour {nom}\"; Console.WriteLine(message); R\u00e9sultat : Bonjour Pierre Paul string.Format() Avec string.Fromat() on peut mettre des accolades dans une phrase pour y introduire les valeurs de notre choix plus tard. int nbMoteurs = 12; int nbBatteries = 2; string facture = string.Format(\"Nb de moteurs : {0} Nb de batteries : {1} \", nbMoteurs, nbBatteries); Le premier param\u00e8tre de la m\u00e9thode : Une cha\u00eene de carat\u00e8re avec un nombre entre accolades pour chaque endroit o\u00f9 on ins\u00e8re une valeur Les nombres entre accolades doivent commencer \u00e0 0. L'ordre est important pour l'insertion des valeurs Les autres param\u00e8tres : Les valeurs \u00e0 ins\u00e9rer, dans l'ordre selon le nombre entre les accolades Les string sont des tableaux On peut aller chercher les lettres en utilisant la notation : nomDuString[positionDuCaract\u00e8re] Par exemple pour afficher les initiales d'un nom complet string nom = \"Tremblay\"; string prenom = \"Keven\"; Console.WriteLine(prenom[0] + \".\" + nom[0] + \".\");","title":"Op\u00e9rations avec les string"},{"location":"string/#operations-avec-les-chaines-de-caracteres-string","text":"","title":"Op\u00e9rations avec les cha\u00eenes de caract\u00e8res (string)"},{"location":"string/#concatenation-combiner-plusieurs-chaines-avec-loperateur","text":"Exemples de concat\u00e9nation string nom = \"Smith\"; string prenom = \"Jean\"; string nomComplet = \"\"; nomComplet = prenom + \" \" + nom;","title":"Concat\u00e9nation : Combiner plusieurs cha\u00eenes avec l'op\u00e9rateur +"},{"location":"string/#construire-une-phrase-selon-des-conditions","text":"En utilisant la concat\u00e9nation il est possible de configurer un message variable \u00e0 l'utilisateur string facture = \"\"; string choix = \"\"; Console.WriteLine(\"Ajouter un contr\u00f4leur (1)Pi ou (2)Pi z\u00e9ro); choix = Console.ReadLine(); if(choix == \"1\") { facture = facture + \"Contr\u00f4ler Pi, \"; } else { facture = facture + \"Contr\u00f4leur Pi z\u00e9ro, \"; } Console.WriteLine(\"Matrice de LEDS? o/n\"); choix = Console.ReadLine(); if(choix == \"o\") { facture = facture + \"Matrice de LEDS, \"; }","title":"Construire une phrase selon des conditions"},{"location":"string/#mettre-des-variables-dans-une-chaine-de-caracteres","text":"La m\u00e9thode Console.WriteLine accepte d'ajouter des variables dans un texte avec l'op\u00e9rateur + Cette fa\u00e7on peut devenir difficile \u00e0 lire, il existe aussi le formattage au moyen du $ ou de la m\u00e9thode string.Format();","title":"Mettre des variables dans une cha\u00eene de caract\u00e8res"},{"location":"string/#formattage-avec","text":"En mettant $ devant les \"\" on peut introduire une variable dans notre ch\u00e2ine de caract\u00e8re directement; string nom = \"Pierre Paul\"; string message = $\"Bonjour {nom}\"; Console.WriteLine(message); R\u00e9sultat : Bonjour Pierre Paul","title":"Formattage avec $"},{"location":"string/#stringformat","text":"Avec string.Fromat() on peut mettre des accolades dans une phrase pour y introduire les valeurs de notre choix plus tard. int nbMoteurs = 12; int nbBatteries = 2; string facture = string.Format(\"Nb de moteurs : {0} Nb de batteries : {1} \", nbMoteurs, nbBatteries); Le premier param\u00e8tre de la m\u00e9thode : Une cha\u00eene de carat\u00e8re avec un nombre entre accolades pour chaque endroit o\u00f9 on ins\u00e8re une valeur Les nombres entre accolades doivent commencer \u00e0 0. L'ordre est important pour l'insertion des valeurs Les autres param\u00e8tres : Les valeurs \u00e0 ins\u00e9rer, dans l'ordre selon le nombre entre les accolades","title":"string.Format()"},{"location":"string/#les-string-sont-des-tableaux","text":"On peut aller chercher les lettres en utilisant la notation : nomDuString[positionDuCaract\u00e8re] Par exemple pour afficher les initiales d'un nom complet string nom = \"Tremblay\"; string prenom = \"Keven\"; Console.WriteLine(prenom[0] + \".\" + nom[0] + \".\");","title":"Les string sont des tableaux"},{"location":"tableau/","text":"Structure de donn\u00e9es : tableau Le tableau permet d'avoir plusieurs valeurs stock\u00e9es en m\u00e9moire pour une seule variable . Les donn\u00e9es stock\u00e9es dans le tableau doivent \u00eatre de la m\u00eame nature comme : Une s\u00e9rie de noms Une s\u00e9rie de notes Les prix des items dans un panier Le tableau permet entre autre : Faciliter le traitement de variables multiples (ex.: note1, note2, note3, ...) Utiliser une boucle pour traiter plusieurs donn\u00e9es Am\u00e9liorer le temps d'acc\u00e8s au donn\u00e9es (Les donn\u00e9es d'un tableau sont plac\u00e9e une \u00e0 c\u00f4t\u00e9 de l'autre en m\u00e9moire) D\u00e9claration type[] nom = new type[nombre d'\u00e9l\u00e9ment] Le nombre de donn\u00e9es dans un tableau doit \u00eatre fix\u00e9e lors de la d\u00e9claration Exemple en C# int[] notes = new int[30]; D\u00e9claration alternative Quand on sait d\u00e9j\u00e0 ce qu'il y a dans le tableau, on peut d\u00e9clarer le tableau diff\u00e9rement. int[] notes = new int[]{98, 76, 42, 73, 89}; ou int[] notes = {98, 76, 42, 73, 89}; Utiliser un tableau Comme les variables, les valeurs des tableaux peuvent \u00eatre utilis\u00e9es pour des calculs ou modifi\u00e9es. Pour acc\u00e9der \u00e0 une donn\u00e9e du tableau, il faut indiquer sa position. La position d'une donn\u00e9e dans le tableau s'appelle index La num\u00e9rotation des index du tableau commence toujours \u00e0 0 On peut obtenir la longueur d'un tableau en utilisant nomDuTableau.Length Quelques exemples d'utilisation int[] notes = {98, 76, 42, 73, 89}; double moyenne = 0; // Modifier la premi\u00e8re note du tableau notes[0] = 97; // Afficher la 3\u00e8me notes du tableau Console.WriteLine(notes[2]); // Faire la moyenne avec une boucle for(int i = 0; i < notes.Length; i++) { moyenne = moyenne + notes[i]; i++; } moyenne = moyenne / notes.Length; On utilise souvent une boucle pour acc\u00e9der \u00e0 chacune des valeurs du tableau!","title":"Tableaux"},{"location":"tableau/#structure-de-donnees-tableau","text":"Le tableau permet d'avoir plusieurs valeurs stock\u00e9es en m\u00e9moire pour une seule variable . Les donn\u00e9es stock\u00e9es dans le tableau doivent \u00eatre de la m\u00eame nature comme : Une s\u00e9rie de noms Une s\u00e9rie de notes Les prix des items dans un panier Le tableau permet entre autre : Faciliter le traitement de variables multiples (ex.: note1, note2, note3, ...) Utiliser une boucle pour traiter plusieurs donn\u00e9es Am\u00e9liorer le temps d'acc\u00e8s au donn\u00e9es (Les donn\u00e9es d'un tableau sont plac\u00e9e une \u00e0 c\u00f4t\u00e9 de l'autre en m\u00e9moire)","title":"Structure de donn\u00e9es : tableau"},{"location":"tableau/#declaration","text":"type[] nom = new type[nombre d'\u00e9l\u00e9ment] Le nombre de donn\u00e9es dans un tableau doit \u00eatre fix\u00e9e lors de la d\u00e9claration Exemple en C# int[] notes = new int[30];","title":"D\u00e9claration"},{"location":"tableau/#declaration-alternative","text":"Quand on sait d\u00e9j\u00e0 ce qu'il y a dans le tableau, on peut d\u00e9clarer le tableau diff\u00e9rement. int[] notes = new int[]{98, 76, 42, 73, 89}; ou int[] notes = {98, 76, 42, 73, 89};","title":"D\u00e9claration alternative"},{"location":"tableau/#utiliser-un-tableau","text":"Comme les variables, les valeurs des tableaux peuvent \u00eatre utilis\u00e9es pour des calculs ou modifi\u00e9es. Pour acc\u00e9der \u00e0 une donn\u00e9e du tableau, il faut indiquer sa position. La position d'une donn\u00e9e dans le tableau s'appelle index La num\u00e9rotation des index du tableau commence toujours \u00e0 0 On peut obtenir la longueur d'un tableau en utilisant nomDuTableau.Length Quelques exemples d'utilisation int[] notes = {98, 76, 42, 73, 89}; double moyenne = 0; // Modifier la premi\u00e8re note du tableau notes[0] = 97; // Afficher la 3\u00e8me notes du tableau Console.WriteLine(notes[2]); // Faire la moyenne avec une boucle for(int i = 0; i < notes.Length; i++) { moyenne = moyenne + notes[i]; i++; } moyenne = moyenne / notes.Length; On utilise souvent une boucle pour acc\u00e9der \u00e0 chacune des valeurs du tableau!","title":"Utiliser un tableau"},{"location":"utils/","text":"Utilitaires et essentiels Afficher \u00e0 la console sans sauter de ligne Console.Write(\"Mon texte.\"); Console.Write(\" La suite de mon texte.\"); Effacer la console Console.Clear(); Inclure un saut de ligne dans une message de type string Le symble \\n dans un texte fera sauter une ligne dans un string Console.WriteLine(\"Ma premi\u00e8re ligne \\n Ma deuxi\u00e8me ligne\"); Saisir \u00e0 la console Texte string leTexte = \"\"; Console.WriteLine(\"Entrer votre texte\"); leTexte = Console.ReadLine(); Nombre entier (int) int nombre = 0; Console.WriteLine(\"Entrer votre nombre\"); int.TryParse(Console.ReadLine(), out nombre); Nombre r\u00e9el (double) double nombre = 0; Console.WriteLine(\"Entrer votre nombre\"); double.TryParse(Console.ReadLine(), out nombre); G\u00e9n\u00e9rer une nombre al\u00e9atoire Placer cette initialisation au d\u00e9but de votre m\u00e9thode Random aleatoire = new Random(); Pour assigner une nombre al\u00e9atoire \u00e0 une variable nombre = aleatoire.Next(); Pour assigner une nombre al\u00e9atoire avec un maximum (commence \u00e0 0) Le maximum doit toujours \u00eatre plus grand de 1 que le nombre maximum d\u00e9sir\u00e9 nombre = aleatoire.Next(101); Pour assigner une nombre al\u00e9atoire avec un minimum et un maximum Le maximum doit toujours \u00eatre plus grand de 1 que le nombre maximum d\u00e9sir\u00e9 nombre = aleatoire.Next(1, 101); Faire une pause Thread.Sleep(1000); Le param\u00e8tre pass\u00e9 \u00e0 la m\u00e9thode Sleep est un nombre de millisecondes. Le param\u00e8tre ci-dessus fait une pause de 1 seconde. Caculer la puissance et la racine carr\u00e9 d'un nombre Math.Pow(2,5); \u00e9quivalent de 2 puissance 5, donne 32 Math.Sqrt(4); \u00e9quivalent de la racine carr\u00e9 de 2, donne 2","title":"M\u00e9thodes utiles"},{"location":"utils/#utilitaires-et-essentiels","text":"","title":"Utilitaires et essentiels"},{"location":"utils/#afficher-a-la-console-sans-sauter-de-ligne","text":"Console.Write(\"Mon texte.\"); Console.Write(\" La suite de mon texte.\");","title":"Afficher \u00e0 la console sans sauter de ligne"},{"location":"utils/#effacer-la-console","text":"Console.Clear();","title":"Effacer la console"},{"location":"utils/#inclure-un-saut-de-ligne-dans-une-message-de-type-string","text":"Le symble \\n dans un texte fera sauter une ligne dans un string Console.WriteLine(\"Ma premi\u00e8re ligne \\n Ma deuxi\u00e8me ligne\");","title":"Inclure un saut de ligne dans une message de type string"},{"location":"utils/#saisir-a-la-console","text":"","title":"Saisir \u00e0 la console"},{"location":"utils/#texte","text":"string leTexte = \"\"; Console.WriteLine(\"Entrer votre texte\"); leTexte = Console.ReadLine();","title":"Texte"},{"location":"utils/#nombre-entier-int","text":"int nombre = 0; Console.WriteLine(\"Entrer votre nombre\"); int.TryParse(Console.ReadLine(), out nombre);","title":"Nombre entier (int)"},{"location":"utils/#nombre-reel-double","text":"double nombre = 0; Console.WriteLine(\"Entrer votre nombre\"); double.TryParse(Console.ReadLine(), out nombre);","title":"Nombre r\u00e9el (double)"},{"location":"utils/#generer-une-nombre-aleatoire","text":"Placer cette initialisation au d\u00e9but de votre m\u00e9thode Random aleatoire = new Random(); Pour assigner une nombre al\u00e9atoire \u00e0 une variable nombre = aleatoire.Next(); Pour assigner une nombre al\u00e9atoire avec un maximum (commence \u00e0 0) Le maximum doit toujours \u00eatre plus grand de 1 que le nombre maximum d\u00e9sir\u00e9 nombre = aleatoire.Next(101); Pour assigner une nombre al\u00e9atoire avec un minimum et un maximum Le maximum doit toujours \u00eatre plus grand de 1 que le nombre maximum d\u00e9sir\u00e9 nombre = aleatoire.Next(1, 101);","title":"G\u00e9n\u00e9rer une nombre al\u00e9atoire"},{"location":"utils/#faire-une-pause","text":"Thread.Sleep(1000); Le param\u00e8tre pass\u00e9 \u00e0 la m\u00e9thode Sleep est un nombre de millisecondes. Le param\u00e8tre ci-dessus fait une pause de 1 seconde.","title":"Faire une pause"},{"location":"utils/#caculer-la-puissance-et-la-racine-carre-dun-nombre","text":"Math.Pow(2,5); \u00e9quivalent de 2 puissance 5, donne 32 Math.Sqrt(4); \u00e9quivalent de la racine carr\u00e9 de 2, donne 2","title":"Caculer la puissance et la racine carr\u00e9 d'un nombre"},{"location":"variables-types/","text":"Variables et types Variables Les variables associent un espace dans la m\u00e9moire avec un nom. Elles sont utilis\u00e9es pour stocker les donn\u00e9es necessaires \u00e0 la programmation Types Le type d'une variable d\u00e9finit ce qu'elle contient et l'espace qu'elle utilise dans la m\u00e9moire : Un nombre entier : 1 Un nombre r\u00e9el : 2.5 Un caract\u00e8re : a Une phrase (cha\u00eene de caract\u00e8re) : Reste calme et appelle Fred Une valeur vrai ou faux : true Il existe beacuoup d'autres types pour les variables! Types de base en C# int : un entier double : un nombre r\u00e9el char : un caract\u00e8re string : une phrase bool : vrai ou faux Il y a des types plus sp\u00e9cifiques. Il nous permettent d'utiliser plus ou moins de m\u00e9moire selon ce que l'on a l'intention de faire avec la variable. Par exemple : int : un entier entre -2147483648 et 2147483647 prend 32 bit short : un entier entre -32768 et 32767 prend 16 bit Utiliser une variable La d\u00e9clarer : La d\u00e9claration dit \u00e0 notre processeur de lui r\u00e9server un espace dans la m\u00e9moire vive Lui assigner une valeur : L' assignation met une valeur dans la m\u00e9moire Quand on combine la d\u00e9claration et l'assignation on initialise la variable. D\u00e9claration Quand on d\u00e9clare la variable il est obligatoire de d\u00e9terminer son type en premier, puis de lui donner une nom Le nom d'une variable doit \u00eatre significatif . On sait \u00e0 quoi elle sert en lisant le nom. Par exemple : moyenne, total, texteIntro, ... Le nom d'une variable commence par une lettre minuscule Si le nom d'une variable a plus qu'un mot, tous les mots apr\u00e8s le premier mot commencent par une majuscule Quelques exemples de d\u00e9claration : int total; double moyenne; string prenom; Assignation L'assignation se fait avec l'op\u00e9rateur = Il faut que la valeur assign\u00e9e corresponde au type de la vairable Quelques exemples d'assignation ( avec la d\u00e9claration avant ) : string prenom; prenom = \"Jean\" double moyenne; moyenne = 78.23; On ne r\u00e9p\u00e8te pas le type lors de l'assignation Initialisation L'initialisation combine la d\u00e9claration et l'assignation en une seule instruction Il est important d'initialiser les variables pour \u00e9viter la possibilit\u00e9 d'erreur Quand on ne sait pas d'avance quelle valeur assigner, on met une valeur par d\u00e9faut : int : 0 double : 0.0 char : '' string : \"\" bool : true Quelques exemple d'initialisation : int total = 0; double moyenne = 0.0; char code = ''; string prenom = \"\"; bool valide = true;","title":"Variables et types"},{"location":"variables-types/#variables-et-types","text":"","title":"Variables et types"},{"location":"variables-types/#variables","text":"Les variables associent un espace dans la m\u00e9moire avec un nom. Elles sont utilis\u00e9es pour stocker les donn\u00e9es necessaires \u00e0 la programmation","title":"Variables"},{"location":"variables-types/#types","text":"Le type d'une variable d\u00e9finit ce qu'elle contient et l'espace qu'elle utilise dans la m\u00e9moire : Un nombre entier : 1 Un nombre r\u00e9el : 2.5 Un caract\u00e8re : a Une phrase (cha\u00eene de caract\u00e8re) : Reste calme et appelle Fred Une valeur vrai ou faux : true Il existe beacuoup d'autres types pour les variables!","title":"Types"},{"location":"variables-types/#types-de-base-en-c","text":"int : un entier double : un nombre r\u00e9el char : un caract\u00e8re string : une phrase bool : vrai ou faux Il y a des types plus sp\u00e9cifiques. Il nous permettent d'utiliser plus ou moins de m\u00e9moire selon ce que l'on a l'intention de faire avec la variable. Par exemple : int : un entier entre -2147483648 et 2147483647 prend 32 bit short : un entier entre -32768 et 32767 prend 16 bit","title":"Types de base en C#"},{"location":"variables-types/#utiliser-une-variable","text":"La d\u00e9clarer : La d\u00e9claration dit \u00e0 notre processeur de lui r\u00e9server un espace dans la m\u00e9moire vive Lui assigner une valeur : L' assignation met une valeur dans la m\u00e9moire Quand on combine la d\u00e9claration et l'assignation on initialise la variable.","title":"Utiliser une variable"},{"location":"variables-types/#declaration","text":"Quand on d\u00e9clare la variable il est obligatoire de d\u00e9terminer son type en premier, puis de lui donner une nom Le nom d'une variable doit \u00eatre significatif . On sait \u00e0 quoi elle sert en lisant le nom. Par exemple : moyenne, total, texteIntro, ... Le nom d'une variable commence par une lettre minuscule Si le nom d'une variable a plus qu'un mot, tous les mots apr\u00e8s le premier mot commencent par une majuscule Quelques exemples de d\u00e9claration : int total; double moyenne; string prenom;","title":"D\u00e9claration"},{"location":"variables-types/#assignation","text":"L'assignation se fait avec l'op\u00e9rateur = Il faut que la valeur assign\u00e9e corresponde au type de la vairable Quelques exemples d'assignation ( avec la d\u00e9claration avant ) : string prenom; prenom = \"Jean\" double moyenne; moyenne = 78.23; On ne r\u00e9p\u00e8te pas le type lors de l'assignation","title":"Assignation"},{"location":"variables-types/#initialisation","text":"L'initialisation combine la d\u00e9claration et l'assignation en une seule instruction Il est important d'initialiser les variables pour \u00e9viter la possibilit\u00e9 d'erreur Quand on ne sait pas d'avance quelle valeur assigner, on met une valeur par d\u00e9faut : int : 0 double : 0.0 char : '' string : \"\" bool : true Quelques exemple d'initialisation : int total = 0; double moyenne = 0.0; char code = ''; string prenom = \"\"; bool valide = true;","title":"Initialisation"},{"location":"while/","text":"Boucle : while La boucle while continue tant que son travail n'est pas fini. Syntaxe while(condtion) { // instructions } Condition de fin La boucle arr\u00eate quand la condition entre parenth\u00e8ses a une valeur logique : faux Donc une boucle while(true) { } n'arr\u00eate jamais! Boucle avec compteur La technique habituelle pour d\u00e9terminer le nombre de fois que la boucle est ex\u00e9cut\u00e9e : Une variable qui compte les tours. Elle commence habituellement \u00e0 0 La condition entre les parenth\u00e8ses donne vrai ou faux selon la valeur du compteur La boucle fait ses instructions tant que le compteur est plus petite que le nombre maximum de boucles \u00e0 faire // Cette boucle ex\u00e9cute ses instructions 10 fois int compteur = 0; while(compteur < 10) { // instructions }","title":"While"},{"location":"while/#boucle-while","text":"La boucle while continue tant que son travail n'est pas fini.","title":"Boucle : while"},{"location":"while/#syntaxe","text":"while(condtion) { // instructions }","title":"Syntaxe"},{"location":"while/#condition-de-fin","text":"La boucle arr\u00eate quand la condition entre parenth\u00e8ses a une valeur logique : faux Donc une boucle while(true) { } n'arr\u00eate jamais!","title":"Condition de fin"},{"location":"while/#boucle-avec-compteur","text":"La technique habituelle pour d\u00e9terminer le nombre de fois que la boucle est ex\u00e9cut\u00e9e : Une variable qui compte les tours. Elle commence habituellement \u00e0 0 La condition entre les parenth\u00e8ses donne vrai ou faux selon la valeur du compteur La boucle fait ses instructions tant que le compteur est plus petite que le nombre maximum de boucles \u00e0 faire // Cette boucle ex\u00e9cute ses instructions 10 fois int compteur = 0; while(compteur < 10) { // instructions }","title":"Boucle avec compteur"}]}