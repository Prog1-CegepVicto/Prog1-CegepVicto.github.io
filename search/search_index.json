{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Programmation 1 - C\u00e9gep de Victoriaville","text":""},{"location":"#enseignant","title":"Enseignant","text":"<p>Fr\u00e9d\u00e9rik Taleb</p>"},{"location":"#horaire","title":"Horaire","text":"<p>Groupe 1</p> <ul> <li>Lundi :    C-211  10h15 \u00e0 12h05 </li> <li>Mercredi : C-211  13h15 \u00e0 15h05</li> <li>Vendredi : C-211  13h15 \u00e0 15h05</li> </ul> <p>Groupe 2</p> <ul> <li>Lundi :    C-211  8h15 \u00e0 10h05</li> <li>Mercredi : C-211  15h15 \u00e0 17h05</li> <li>Vendredi : C-211  8h15 \u00e0 10h05</li> </ul>"},{"location":"#planification-de-la-session","title":"Planification de la session","text":"<ul> <li>Semaine 1 : variables, op\u00e9rateurs arithm\u00e9tiques, condition (si)</li> <li>Semaine 2 : port\u00e9e, m\u00e9thodes, d\u00e9bogeur, boucles</li> <li>Semaine 3 : boucles, examen formatif</li> <li>Semaine 4 : tableaux</li> <li></li> </ul>"},{"location":"POO_constructeur/","title":"Le constructeur","text":"<p>Le constructeur est une m\u00e9thode sp\u00e9ciale qui sert \u00e0 d\u00e9terminer les attributs initiaux d'une instance</p> <p>Le constructeur est utilis\u00e9 une et une seule fois pour chaque instance, lors de sa cr\u00e9ation avec le mot cl\u00e9 new</p> <p>Exemple de cr\u00e9ation d'une instance de classe :</p> <pre><code>Personne eleve = new Personne();\n</code></pre> <p>Le constructeur porte toujours exactement le m\u00eame nom que la classe</p> <p>Exemple de constructeur pour la classe appel\u00e9e Personne</p> <pre><code>public Personne()\n{\n    // Initialisation de l'instance\n}\n</code></pre>"},{"location":"POO_constructeur/#parametres","title":"Param\u00e8tres","text":"<p>Comme les m\u00e9thode, un constructeur peut recevoir des param\u00e8tres pour initialiser notre instance correctement.</p> <p>Par exemple :</p> <pre><code>public Personne(string prenom, string nom, int age)\n{\n    this.prenom = prenom;\n    this.nom = nom;\n    this.age = age;\n}\n</code></pre>"},{"location":"POO_creation/","title":"Cr\u00e9er une classe","text":"<ul> <li>Le nom de la classe doit commencer par une Majuscule</li> <li>Le nom doit \u00eatre significatif (une classe qui repr\u00e9sente un rendez-vous : RendezVous)</li> <li>Aucun accent</li> </ul>"},{"location":"POO_creation/#1-ajouter-une-fichier-cs-dans-le-projet","title":"1. Ajouter une fichier .cs dans le projet","text":"<ul> <li>Le nom du fichier .cs doit \u00eatre le m\u00eame que celui de la classe</li> </ul>"},{"location":"POO_creation/#2-definir-la-classe","title":"2. D\u00e9finir la classe","text":"<p>Dans cet exemple la classe d\u00e9finie est Personne, et repr\u00e9sente... quelqu'un.</p> <p>Le projet pour travailler s'appelle GestionClasse, d'o\u00f9 le namespace est GestionClasse.</p> <pre><code>namespace GestionClasse\n{\n    public class Personne\n    {\n        public string prenom;\n        public string nom;\n        public int age;\n\n        public void afficherNomComplet()\n        {\n            Console.WriteLine(\"{0} {1}\", this.prenom, this.nom);\n        }\n    }\n}\n</code></pre> <p>Les attributs prenom, nom et age constituent l'\u00e9tat de la classe  La m\u00e9thode afficherNomComplet() est la seule interaction et fait partie du comportement de la classe</p>"},{"location":"POO_creation/#3-attributs-et-comportements","title":"3. Attributs et comportements","text":"<ul> <li>Les attributs sont des variables ou des structures de donn\u00e9es (tableau, liste, classe, ...)</li> <li>Lorsque l'on utilise un attribut dans un comportement (m\u00e9thode de la classe) il faut utiliser le mot cl\u00e9 this en avant de l'attritbut</li> </ul> <p>Exemple d'utilisation d'un attribut dans une m\u00e9thode de la classe :</p> <pre><code>    public void changerNom(string nom)\n    {\n        this.nom = nom\n    }\n</code></pre> <p>Dans cet exemple this.nom est l'attribut et nom est le param\u00e8tre.</p>"},{"location":"POO_creation/#4-niveau-dacces","title":"4. Niveau d'acc\u00e8s","text":"<p>Dans l'exemple pr\u00e9c\u00e9dent, on observe le mot cl\u00e9 <code>public</code></p> <p>Une classe est g\u00e9n\u00e9ralement publique, c'est \u00e0 dire que l'on peut l'utiliser \u00e0 partir de n'importe quel endroit dans le code!</p> <p>Par contre il y a plusieurs niveau d'acc\u00e8s possibles et ils sont sp\u00e9cialement importants pour les attributs et les comportements de la classe</p> <ul> <li>public    : toujours accessible \u00e0 partir du code, on peut faire n'importe quoi (ou presque) avec</li> <li>private   : l'objet s'occupe lui m\u00eame de modifier cet attribut, probablement \u00e0 travers une m\u00e9thode</li> <li>protected : accessible et visible seulement pour la classe ou une classe qui en h\u00e9rite</li> </ul>"},{"location":"POO_definition/","title":"Programmation orient\u00e9e objet","text":"<p>La programmation orient\u00e9e objet ou POO est une m\u00e9thode de qui consiste \u00e0 d\u00e9finir des entit\u00e9es logicielles et leurs int\u00e9ractions.</p> <p>Ces entit\u00e9s, les objets, rerp\u00e9sentent soit : - Un concept (ex: Contr\u00f4leur, l'objet contr\u00f4le le d\u00e9roulement du programme) - Une abstraction du monde physique ou imaginaire (Un personnage, une voiture, un rendez-vous)</p> <p>L'objet a : - Un \u00e9tat :          sa structure interne, ses attributs (varibables, tableaux, autres objets) - Des comportements: ses m\u00e9thodes pour modifier l'\u00e9tat ou interagir avec d'autres objets</p> <p>L'objectif est donc de repr\u00e9senter les objets et les relations pour former un syst\u00e8me qui r\u00e9pond aux besoin du client.</p>"},{"location":"POO_definition/#la-classe","title":"La classe","text":"<p>Pour cr\u00e9er un objet, on d\u00e9finit sa classe (class). La classe est une sorte de plan qui nous permettra de construire l'objet et l'utiliser.</p> <p>La classe contient :</p> <ul> <li>Les attributs : les caract\u00e9ristiques de l'objet</li> <li>Les m\u00e9thodes : les comportements et interactions de l'objet</li> </ul>"},{"location":"POO_definition/#exemple-le-personnage-de-jeu-video","title":"Exemple : le personnage de jeu vid\u00e9o","text":"<p>Attributs : vie, arme, armure, abilet\u00e9s, etc... M\u00e9thodes : avancer, reculer, attaquer, etc...</p>"},{"location":"POO_definition/#linstance","title":"L'instance","text":"<p>Pour utiliser notre classe, il faut cr\u00e9er une instance de celle-ci. </p> <p>Chaque classe publique d'un projet peut \u00eatre utilis\u00e9e comme type. Sans le savoir nous avons d\u00e9j\u00e0 utili\u00e9 une classe pour cr\u00e9er un objet (instance) </p> <p><code>Random rng = new Random();</code></p> <p>Cette instruction cr\u00e9e une instance, nomm\u00e9e rng, de la classe Random. On peut maintenant utiliser les fonctionnalit\u00e9s de la classe Random avec la variable rng.</p>"},{"location":"POO_encapsulation/","title":"Encapsulation","text":""},{"location":"POO_utilisation/","title":"Utiliser une classe","text":"<p>Une fois la classe cr\u00e9\u00e9e, il faut utiliser une instance de cette classe pour l'incorporer au programme.</p> <p>Un programme peut avoir une multitudes d'instances de la m\u00eame classe.</p> <p>Une instance est en fait une variable dont le type est une classe : <code>Personne eleve;</code></p> <p>Ci-dessus la variable eleve va \u00eatre une instance de la classe Personne.</p> <p>Il est obligatoire d'initialiser une instance avant de l'utiliser!</p>"},{"location":"POO_utilisation/#initialiser-une-instance","title":"Initialiser une instance","text":"<p>Le mot cl\u00e9 new, suivit du nom de la classe et de parenth\u00e8ses initialise une instance</p> <p><code>Personne eleve = new Personne();</code></p> <p>Remarquez que la partie <code>Personne()</code> est \u00e9crite commme si une m\u00e9thode \u00e9tait appel\u00e9e.</p> <p>Il s'agit d'une m\u00e9thode sp\u00e9ciale nomm\u00e9e constructeur que nous verrons bient\u00f4t.</p>"},{"location":"POO_utilisation/#utiliser-les-attributs-publiques","title":"Utiliser les attributs publiques","text":"<p>Lorsqu'un attribut est publique, il est possible d'y acc\u00e9der directement.</p> <p>En prenant la classe Personne</p> <pre><code>public class Personne\n{\n    public string prenom;\n    public string nom;\n    public int age;\n\n    public void afficherNomComplet();\n}\n</code></pre> <p>Les attributs sont directement modifiable pour les instances de la classe en utilisant .</p> <pre><code>static void Main(string[] args)\n{\n    Personne eleve = new Personne();\n\n    eleve.prenom = \"\u00c9ric\";\n    eleve.nom = \"Treamblay\";\n    eleve.age = 27;\n}\n</code></pre>"},{"location":"POO_utilisation/#utiliser-les-methodes-comportements","title":"Utiliser les m\u00e9thodes (comportements)","text":"<p>Les m\u00e9thodes publiques d'une instance de classe s'utilisent comme les attributs.</p> <p>En reprenant la classe Personne</p> <pre><code>public class Personne\n{\n    public string prenom;\n    public string nom;\n    public int age;\n\n    public void afficherNomComplet()\n    {\n        Console.WriteLine(\"{0} {1}\", prenom, nom);\n    }\n}\n</code></pre> <p>Il est possible d'utiliser la m\u00e9thode afficherNomComplet \u00e0 partir de l'instance de la classe</p> <pre><code>static void Main(string[] args)\n{\n    Personne eleve = new Personne();\n\n    eleve.prenom = \"\u00c9ric\";\n    eleve.nom = \"Treamblay\";\n    eleve.age = 27;\n\n    eleve.afficherNomComplet();\n}\n</code></pre> <p>La console affichera : \u00c9ric Tremblay</p>"},{"location":"debogage/","title":"D\u00e9bogage","text":"<p>Le d\u00e9bogage sert \u00e0 diagnostiquer les erreurs d'un programme. Il nous permet entre autre d'observer les donn\u00e9es en m\u00e9moire pendant l'ex\u00e9cution du programme. </p> <p>Les environnements de d\u00e9veloppement poss\u00e8dent tous des outils pour effectuer ce processus essentiel.</p>"},{"location":"debogage/#types-derreurs","title":"Types d'erreurs","text":""},{"location":"debogage/#erreur-de-compilation","title":"Erreur de compilation","text":"<p>L'erreur de compilation emp\u00eache le programme de d\u00e9marrer. </p> <p>L'environnement de d\u00e9veloppement (Visual Studio dans le cadre du cours) identifie toutes les lignes fautives et fournit une description des erreurs ainsi qu'un code unique reli\u00e9 \u00e0 celle-ci.</p>"},{"location":"debogage/#erreur-dexecution","title":"Erreur d'ex\u00e9cution","text":"<p>Elle est plus difficile \u00e0 observer car le programme s'ex\u00e9cute quand m\u00eame. L'erreur d'ex\u00e9cution arrive quand les instructions ne donnent pas le bon r\u00e9sultat.</p> <p>L'environnement de d\u00e9veloppement ne fournit aucune indication que cette erreur s'est produite. Elle est une des raisons derri\u00e8re le d\u00e9veloppement des m\u00e9thodes de segmentation du code (m\u00e9thodes et programmation orient\u00e9e objet).</p>"},{"location":"debogage/#outils","title":"Outils","text":""},{"location":"debogage/#le-point-darret","title":"Le point d'arr\u00eat","text":"<p>Il arr\u00eate l'ex\u00e9cution du code \u00e0 la ligne choisie. Il permet d'observer l'\u00e9tat des donn\u00e9es en m\u00e9moire.</p> <p>Dans Visual Studio :</p> <ul> <li>Placer le curseur de la souris dans la marge de gauche \u00e0 la ligne d\u00e9sir\u00e9e et cliquer</li> <li>Un point rouge appara\u00eet, il signifie que l'ex\u00e9cution peut \u00eatre arr\u00eat\u00e9e \u00e0 cet endroit</li> </ul> <p></p>"},{"location":"debogage/#lexecution-pas-a-pas","title":"L'ex\u00e9cution pas \u00e0 pas","text":"<p>Un fois l'ex\u00e9cution d'un programme arr\u00eat\u00e9e, il est possible d'ex\u00e9cuter chaque ligne suivant une par une.</p> <p>Dans Visual Studio :</p>"},{"location":"exBouclesTableaux/","title":"Exercices : boucles et tableaux","text":""},{"location":"exBouclesTableaux/#1-ecrire-une-methode-qui-trouve-le-nombre-maximum-dans-un-tableau-recu-en-parametre","title":"1. \u00c9crire une m\u00e9thode qui trouve le nombre maximum dans un tableau re\u00e7u en param\u00e8tre","text":""},{"location":"exBouclesTableaux/#2-ecrire-une-methode-qui-trouve-le-nombre-de-fois-quune-lettre-est-presente-dans-un-mot-la-lettre-et-le-mot-sont-en-parametre","title":"2. \u00c9crire une m\u00e9thode qui trouve le nombre de fois qu'une lettre est pr\u00e9sente dans un mot. La lettre et le mot sont en param\u00e8tre","text":""},{"location":"exBouclesTableaux/#3-ecrire-un-methode-qui-donne-la-position-de-la-premiere-fois-que-lon-trouve-une-lettre-dans-un-mot-la-lettre-et-le-mot-sont-en-parametre","title":"3. \u00c9crire un m\u00e9thode qui donne la position de la premi\u00e8re fois que l'on trouve une lettre dans un mot. La lettre et le mot sont en param\u00e8tre","text":""},{"location":"exBouclesTableaux/#4-ecrire-une-methode-qui-affiche-le-nombre-de-true-et-le-nombre-de-false-dans-un-tableau-de-booleens-le-tableau-est-donne-en-parametre","title":"4. \u00c9crire une m\u00e9thode qui affiche le nombre de true et le nombre de false dans un tableau de bool\u00e9ens. Le tableau est donn\u00e9 en param\u00e8tre","text":""},{"location":"exBouclesTableaux/#5-ecrire-une-methode-qui-affiche-la-plus-longue-sequence-1-dans-un-tableau-de-0-et-1-le-tableau-est-donnee-en-parametre","title":"5. \u00c9crire une m\u00e9thode qui affiche la plus longue s\u00e9quence 1 dans un tableau de 0 et 1. Le tableau est donn\u00e9e en param\u00e8tre","text":""},{"location":"exPOO00/","title":"Exercices : Classe, attributs, comportements et constructeurs","text":"<p>Tester les classes dans le programme principal (Main)</p>"},{"location":"exPOO00/#1-classe-eleve","title":"1. Classe Eleve","text":"<ul> <li>Cr\u00e9er une classe Eleve dont les attributs sont: nom (string), pr\u00e9nom(string) et DA(string)\u200b</li> <li>Ajouter un constructeur qui re\u00e7oit les valeurs des attributs en param\u00e8tre et les assigne\u200b aux bons attributs</li> <li>Modifier la classe Eleve pour avoir un attribut suppl\u00e9mentaire : notes (un tableau d'entiers)\u200b</li> <li>Modifier le constructeur de la classe Eleve pour recevoir un param\u00e8tre suppl\u00e9mentaire, le nombre de cours suivi par l'\u00e9tudiant. Initialiser le tableau \u00e0 la bonne longueur dans le constructeur.\u200b</li> <li>Cr\u00e9er une m\u00e9thode pour ajouter une note, s'il reste de la place dans le tableau. Sinon on ne fait rien.</li> <li>Ajouter une m\u00e9thode qui donne la moyenne de ce tableau.</li> <li>D\u00e9fi : modifier l'ajout de la note pour que l'on puisse en ajouter autant que l'on en veut. L'attribut DOIT rester un tableau.</li> </ul>"},{"location":"exPOO00/#2-classe-fraction","title":"2. Classe Fraction","text":"<ul> <li>Cr\u00e9er une classe Fraction qui contient 2 attributs : num\u00e9rateur et d\u00e9nominateur. \u200b</li> <li>Ajouter un constructeur pour la classe Fraction qui re\u00e7oit en param\u00e8tre le num\u00e9rateur et le d\u00e9nominateur.\u200b</li> <li>Le constructeur assigne le num\u00e9rateur sans v\u00e9rification.\u200b</li> <li>Si le d\u00e9nominateur est 0, on le remplace par 1 car on ne peut pas avoir de division par 0.\u200b</li> </ul>"},{"location":"exPOO00/#3-classe-arme","title":"3. Classe Arme","text":"<ul> <li>Cr\u00e9er une class Arme avec les attributs : nom, dommageMax, bonusMagique</li> <li>Le constructeur re\u00e7oit en param\u00e8tre le nom et le dommage\u200b</li> <li>L'arme a 5% de chances d'\u00eatre magique. Quand elle est magique elle a 2% de chance d'\u00eatre +1 (bonus de 1), 1% d'\u00eatre +2, 0.5% d'\u00eatre +3, 0.05% d'\u00eatre +4 et 0.01% d'\u00eatre +5</li> </ul>"},{"location":"exPOO00/#4-classe-caracteristique","title":"4. Classe Caracteristique","text":"<p>Pour d\u00e9velopper le projet D&amp;D, on veut rafiner la m\u00e9thode de cr\u00e9ation d'un personnage. Au lieu d'une statistique d'attaque, les personnages ont en fait plusieurs charact\u00e9ristiques : Force, Dext\u00e9rit\u00e9, Constitution, Intelligence, Sagesse et Charisme</p> <p>Selon le score d'une charact\u00e9ristique, il y a un modificateur (bonus ou malus) qui est calcul\u00e9 avec la formule : (score/2)-5</p> <p>Lorsque le joueur tente une action pendant le jeu, il y a toujours une caract\u00e9ristique li\u00e9e \u00e0 l'action. Par exemple, un personnage qui tente de s\u00e9duire un des acteurs du jeu utilisera son Charisme. Pour savoir s'il r\u00e9ussit, il lance un d\u00e9 \u00e0 20 faces et ajoute le modificateur li\u00e9 \u00e0 son Charisme. Quand le r\u00e9sultat est plus haut que la difficult\u00e9e d\u00e9termin\u00e9e par le ma\u00eetre du jeu, c'est un succ\u00e8s, sinon c'est un \u00e9chec.</p> <p>En vous inspirant des classes cr\u00e9\u00e9es jusqu'ici, cr\u00e9er une classe Caracteristique qui pourrait repr\u00e9senter une caract\u00e9ristique \u00e0 la fois.</p>"},{"location":"exPOO00/#5-classe-tableaudynamique-double","title":"5. Classe TableauDynamique (double)","text":"<ul> <li>La classe a un tableau de nombres r\u00e9els (double) et un entier qui garde le nombre de donn\u00e9es ins\u00e9r\u00e9es dans le tableau</li> <li>Le constructeur initialise le tableau \u00e0 une longueur par d\u00e9faut de 10</li> <li>Une m\u00e9thode permet d'ajouter un nombre au tableau</li> <li>Si le tableau est plein on copie les nombres d\u00e9j\u00e0 pr\u00e9sent dans un tableau de 1.5 fois (arrondi) la longueur du tableau actuel et on remplace le tableau actuel par le nouveau tableau</li> <li>Une m\u00e9thode calcul le total du tableau</li> <li>Une m\u00e9thode calcul la moyenne</li> <li>Un m\u00e9thode calcul la m\u00e9diane </li> <li>Une m\u00e9thode l'\u00e9cart type</li> </ul> <p>En utilisant le tableau dynamique, cr\u00e9er un programme pour un enseignant qui veut utiliser les notes de son groupe et avoir la moyenne, la m\u00e9diane et l'\u00e9cart type</p>"},{"location":"exPOO00/#6-classe-facture","title":"6. Classe Facture","text":"<ul> <li>La classe facture respr\u00e9sente... une facture</li> <li>Elle commence vierge mais doit \u00eatre capable de contenir plusieurs informations</li> <li>Les informations : les items, les prix des items, la taxe \u00e0 appliquer au total</li> <li>Le constructeur ne re\u00e7oit que la taxe \u00e0 appliquer comme information</li> <li>Une m\u00e9thode permet d'ajouter un item (nom) et son prix \u00e0 la facture</li> <li>Une m\u00e9thode donne le sous total (total sans les taxes)</li> <li>Une m\u00e9thode donne la taxe sur le sous-total</li> <li>Une m\u00e9thode donne le total de la facture</li> <li>Une m\u00e9thode affiche les items et leur prix sur une ligne chacun, ensuite le sous-total, les taxes et le total</li> </ul> <p>Cr\u00e9er la facture et le programme principal permettant \u00e0 l'utilisateur de remplir et afficher la facture</p>"},{"location":"exPOO00/#7-classe-carte","title":"7. Classe Carte","text":"<ul> <li>La classe carte repr\u00e9sente une carte d'un jeu de cartes classique avec sa sorte et sa valeur (as = 1, 2, 3, ..., valet = 11, dame = 12, roi = 13);</li> <li>Une m\u00e9thode donne un string contenant le nom complet de la carte (ex: 2 de pique)</li> </ul> <p>Cr\u00e9er un programme qui distribue un main de 5 cartes parmi les 52 et affiche les cartes \u00e0 l'utilisateur</p>"},{"location":"exPOO00/#8-classe-item","title":"8. Classe Item","text":"<ul> <li>La classe Item fait partie d'un syst\u00e8me de gestion d'inventaire et de facturation</li> <li>Un item a son nom, son prix, son code et une quantit\u00e9</li> </ul> <p>Cr\u00e9er une nouvelle classe Facture qui utilise des items plut\u00f4t qu'un nom et un prix.</p>"},{"location":"exSem1/","title":"Exercices de la semaine 1 : variables et conditions","text":""},{"location":"exSem1/#1-aire-et-perimetre-du-rectangle","title":"1. Aire et p\u00e9rim\u00e8tre du rectangle","text":"<ul> <li>Cr\u00e9er un programme qui demande \u00e0 l'utilisateur la longueur et la largeur d'un rectangle</li> <li>Calculer l'aire et le p\u00e9rim\u00e8tre du rectangle</li> <li>Afficher l'aire et le p\u00e9rim\u00e8tre \u00e0 la console</li> </ul> <p>Formules</p>"},{"location":"exSem1/#2-conversion-de-bitcoin","title":"2. Conversion de Bitcoin","text":"<ul> <li>Cr\u00e9er un programme qui demande \u00e0 l'utilisateur combien il poss\u00e8de de Bitcoin et affiche la valeur en dollars canadiens.</li> <li>1 Bitcoin = 62315.32$ CAD pour les besoin du cours</li> </ul>"},{"location":"exSem1/#3-salaire-brut","title":"3. Salaire brut","text":"<ul> <li>Cr\u00e9er un programme qui calcul le salaire brut d'un employ\u00e9 pour l'ann\u00e9e</li> <li>L'utilisateur entre le nombre d'heures effectu\u00e9es par semaine et son taux horaire</li> <li>Afficher le r\u00e9sultat</li> </ul>"},{"location":"exSem1/#4-permutation-swap","title":"4. Permutation (swap)","text":"<p>Une technique tr\u00e8s utilis\u00e9e dans les algorithme de tri est d'\u00e9changer la valeur entre 2 variables. Par habitude, convention, paresse ou anglicisme, on appelle cette op\u00e9ration swap.</p> <ul> <li>Cr\u00e9er un programme qui lit deux nombres \u00e0 la console et les assigne chacun \u00e0 leur variable</li> <li>\u00c9changer le contenu des deux variables : a contient 3 et b contient -15 devient a contient -15 et b contient 3</li> <li>Afficher la valeur de a et b</li> </ul>"},{"location":"exSem1/#5-le-plus-grand","title":"5. Le plus grand","text":"<p>Cr\u00e9er un programme qui lit 2 nombres et affiche le plus grand des 2.</p>"},{"location":"exSem1/#6-pokemon","title":"6. Pokemon","text":"<ul> <li>Cr\u00e9er un programme qui calcule la force et l\u2019agilit\u00e9 d\u2019un personnage en fonction de son type.</li> <li>Les valeurs de d\u00e9part sont de 100 points pour les deux caract\u00e9ristiques.</li> <li>Si l\u2019utilisateur choisit le type feu, le personnage a 10% de plus de force, mais 15% de moins d\u2019agilit\u00e9.</li> <li>Si l\u2019utilisateur choisit le type eau, son personnage a 10% de moins de force, mais 15% de plus d\u2019agilit\u00e9. </li> </ul>"},{"location":"exSem1/#7-exposant","title":"7. Exposant","text":"<ul> <li>Cr\u00e9er un programme qui demande \u00e0 l'utilisateur un nombre et l'exposant \u00e0 appliquer (ex: 2^4)</li> <li>Si l'exposant est 0 le r\u00e9sultat est toujours 1</li> <li>Si l'exposant est 1 le r\u00e9sultat est le nombre entr\u00e9 par l'utilisateur</li> <li>Si l'exposant est 2 on calcul le nombre au carr\u00e9 avec les op\u00e9rations arithm\u00e9tiques</li> <li>Si l'exposant est 3 on calcul le nombre au cube comme au point pr\u00e9c\u00e9dent</li> <li>Si l'exposant est plus grand que 3 on affiche : \"Attends un peu, je vais voir les boucles la semaine prochaine\" sinon on affiche le r\u00e9sultat</li> </ul>"},{"location":"exSem2/","title":"Exercices de la semaine 2 : conditions et boucles","text":""},{"location":"exSem2/#1-compte-a-rebours","title":"1. Compte \u00e0 rebours","text":"<p>\u00c9crire un programme qui saisit un nombre puis affiche ce nombre et tout les nombres jusqu'\u00e0 0.</p>"},{"location":"exSem2/#2-nombre-doccurences","title":"2. Nombre d'occurences","text":"<p>\u00c9crire un programme qui demande \u00e0 l'utilisateur d'entrer des nombres entiers.</p> <p>Les nombres sont saisis tant que l'utilisateur n'entre pas 0.</p> <p>Afficher combien de nombres positifs et combien de nombres n\u00e9gatifs ont \u00e9t\u00e9 saisis \u00e0 la fin seulement.</p>"},{"location":"exSem2/#3-calcul-dune-moyenne","title":"3. Calcul d'une moyenne","text":"<p>\u00c9crire un programme qui demande \u00e0 l'utilisateur d'entrer des notes et ensuite calcule la moyenne.</p> <p>Les notes sont saisies tant que l'utilisateur n'entre pas une note n\u00e9gative. </p> <p>Si la note entr\u00e9e est positive on l'accumule pour avoir le total. </p> <p>\u00c0 la fin on divise le total par le nombre de notes entr\u00e9es pour avoir la moyenne et le r\u00e9sultat est affich\u00e9 \u00e0 la console.</p>"},{"location":"exSem4a/","title":"Exercices de la semaine 4 : boucles et m\u00e9thodes","text":""},{"location":"exSem4a/#partie-1","title":"Partie 1","text":"<p>R\u00e9aliser les exercies en utilisant la boucle for</p>"},{"location":"exSem4a/#1-faire-afficher-15-fois-le-mot-attention","title":"1. Faire afficher 15 fois le mot \"ATTENTION\".\u200b","text":""},{"location":"exSem4a/#2-afficher-les-nombres-de-1-a-10-avec-le-carre-et-le-cube-de-chacun-de-ces-nombres","title":"2. Afficher les nombres de 1 \u00e0 10 avec le carr\u00e9 et le cube de chacun de ces nombres.\u200b","text":""},{"location":"exSem4a/#3-convertir-les-valeurs-fahrenheit-de-40-a-40-en-celsius-par-tranche-de-5-celsius-59fahrenheit-32","title":"3. Convertir les valeurs Fahrenheit de -40 \u00e0 40 en Celsius par tranche de 5. (Celsius = 5/9(fahrenheit-32))\u200b","text":""},{"location":"exSem4a/#4-afficher-le-montant-et-la-taxe-de-15-pour-les-montants-de-500-a-10000-par-tranche-de-500","title":"4. Afficher le montant et la taxe de 15% pour les montants de $5.00 \u00e0 $100.00 par tranche de $5.00. \u200b","text":""},{"location":"exSem4a/#5-prouver-quil-est-preferable-de-prendre-un-montant-de-001-dollars-qui-double-a-chaque-jours-pendant-1-mois-30-jours-que-de-prendre-1-million-de-dollars-maintenant","title":"5. Prouver qu'il est pr\u00e9f\u00e9rable de prendre un montant de 0.01 dollars qui double \u00e0 chaque jours pendant 1 mois (30 jours) que de prendre 1 million de dollars maintenant","text":""},{"location":"exSem4a/#6-afficher-les-nombres-impairs-de-1-a-49","title":"6. Afficher les nombres impairs de 1 \u00e0 49\u200b","text":""},{"location":"exSem4a/#7-afficher-les-nombres-impairs-de-1-a-49-et-mettre-5-valeurs-par-ligne","title":"7. Afficher les nombres impairs de 1 \u00e0 49, et mettre 5 valeurs par ligne","text":""},{"location":"exSem4a/#8-afficher-les-motifs-suivants-a-la-console","title":"8. Afficher les motifs suivants \u00e0 la console","text":"<p>Indices : </p> <ul> <li>une boucle peut \u00eatre \u00e0 l'int\u00e9rieur d'une boucle</li> <li><code>Console.Write(\"...\")</code> affiche \u00e0 la console sans finir la ligne</li> <li>Soyez cr\u00e9atifs avec la variable de la boucle (i,j,k, etc...)</li> </ul>"},{"location":"exSem4a/#a","title":"a","text":"<pre><code>#\n##\n###\n####\n</code></pre>"},{"location":"exSem4a/#b","title":"b","text":"<pre><code>1\n12\n123\n1234\n</code></pre>"},{"location":"exSem4a/#c","title":"c","text":"<pre><code>####\n###\n##\n#\n</code></pre>"},{"location":"exSem4a/#d","title":"d","text":"<pre><code>1\n23\n456\n78910\n</code></pre>"},{"location":"exSem4a/#e","title":"e","text":"<pre><code>123\n456\n789\n\n</code></pre>"},{"location":"exSem5/","title":"Exercices de la semaine 5 : r\u00e9vision des calculs, lecture/\u00e9criture, if","text":"<p>Lien vers Github Classroom</p> <pre><code>// \u00c9crire une m\u00e9thode qui lit la taille d'un utilisateur et dit s'il est petit, moyen, ou grand\n// petit : moins de 1,70m \n// moyen : de 1,70m \u00e0 1,82m\n// grand : plus de 1,82m\nstatic void ex1()\n{ \n\n}\n\n// \u00c9crire la m\u00e9thode qui trouve le plus grand de trois nombres entr\u00e9s \u00e0 la console\nstatic void ex2()\n{\n\n}\n\n// \u00c0 partir des angles internes d'un triangle d\u00e9terminer si le triangle est valide ou non\n// La somme des angles d'un triangle est toujours 180 degr\u00e9s\nstatic void ex3()\n{\n\n}\n\n// Saisir la longueur des 3 c\u00f4t\u00e9s d'un triangle (a, b et c)\n// \u00c0 partir des informations d\u00e9terminer si le triangle est\n// \u00c9quilat\u00e9ral : tous les c\u00f4t\u00e9s ont la m\u00eame longueur\n// Isoc\u00e8le : 2 c\u00f4t\u00e9s \u00e9gaux\n// Scal\u00e8ne : aucun c\u00f4t\u00e9 n'est \u00e9gal \nstatic void ex4()\n{\n\n}\n\n// \u00c0 partir des informations fournies par l'utilisateur calculer la facture du mois pour sa consommation d'\u00e9lectricit\u00e9\n// Frais d'acc\u00e8s au r\u00e9seau par jour : 0.42238$\n// Jusqu'\u00e0 40kWh par jour pour le total des jours (ex: 30 jours = 1200kWh) : 0.06319$ par kWh\n// kWh suppl\u00e9mentaires : 0.09749$ par kWh\nstatic void ex5()\n{\n\n}\n\n// Jeux pair ou impair\n// Le premier joueur choisi 0 ou 1\n// Le premier joueur choisi pair ou impair\n// On efface la console\n// Le deuxi\u00e8me joueur choisi 0 ou 1\n// On affiche le gagnant selon la somme des deux nombres\n// Si la sommme correspond au type de r\u00e9sultat choisi par le premier joueur (pair ou impair) il a gagn\u00e9\n// Sinon le 2\u00e8me joueur a gagn\u00e9\nstatic void ex6()\n{\n\n}\n\n// Pour \u00eatre admis en m\u00e9decine il faut \n// Une cote R au-dessus de 33.0\n// Une note sup\u00e9rieure \u00e0 70% en biologie, chimie et math\u00e9matiques\n// Une moyenne sup\u00e9rieure \u00e0 80% pour les 3 cours pr\u00e9c\u00e9dents\n// \u00c9crire le programme qui d\u00e9termine si l'utilisateur est \u00e9ligible\nstatic void ex7()\n{\n\n}\n</code></pre>"},{"location":"for/","title":"Boucle : for","text":"<p>La boucle for fait une nombre d\u00e9termin\u00e9 de r\u00e9p\u00e9titions. </p> <p>Elle est utilis\u00e9e quand on sait exactement le nombre d'op\u00e9rations \u00e0 effectuer.</p>"},{"location":"for/#syntaxe","title":"Syntaxe","text":"<pre><code>for(variable pour compter; condition de fin; modification de la varible pour compter)\n{\n    // instructions\n}\n</code></pre>"},{"location":"for/#en-c","title":"En C#","text":"<p>Par convention (et en lien avec les math\u00e9matiques) les compteurs utilis\u00e9s sont habituellement : i, j, k, u, v, w</p> <p>Mais il est possible de nommer la variables autrement tant que l'on respecte les r\u00e8gle de nomenclature d'une variable</p> <pre><code>// Cette boucle affiche de 0 \u00e0 9 \u00e0 l'\u00e9cran\nfor(int i = 0; i &lt; 10; i++)\n{\n    Console.WriteLine(i);    \n}\n</code></pre>"},{"location":"for/#condition-de-fin","title":"Condition de fin","text":"<p>La boucle arr\u00eate quand la condition de fin a une valeur logique : FAUX</p> <p>Il n'est pas obligatoire de toujours utiliser une incr\u00e9mentation de 1</p>"},{"location":"for/#repeter-des-instructions","title":"R\u00e9p\u00e9ter des instructions","text":"<p>For sert souvent \u00e0 r\u00e9p\u00e9ter des instructions un nombre de fois d\u00e9termin\u00e9.</p> <p>La variable qui sert de compteur joue aussi fr\u00e9quement un r\u00f4le dans les instructions.</p> <p>Par exemple cette boucle effectue 8 fois les instructions entre les accolades</p> <pre><code>string motDePasse = \"\";\nfor(int i = 0; i &lt; 8; i++)\n{\n    motDePasse = motDePasse + i;\n}\n</code></pre> <ul> <li>Ici le mot de passe commence vide. </li> <li>i est la variable qui sert de compteur, elle commence \u00e0 0 et augmente de 1 \u00e0 chaque fois que les instructions de la boucle sont ex\u00e9cut\u00e9es.</li> <li>Les instructions de la boulces sont ex\u00e9cut\u00e9es autant de fois que i est plus petit que 8.</li> <li>\u00c0 chaque fois que les instructions de la boucle sont ex\u00e9cut\u00e9es on ajoute i au string.</li> <li>\u00c0 la fin de la boucle le mot de passe contient \"01234567\".</li> </ul>"},{"location":"for/#utilisation-avec-les-tableaux","title":"Utilisation avec les tableaux","text":"<p>Dans la grande majorit\u00e9 des cas, la boucle for est utilis\u00e9e pour parcourir un tableau de la permi\u00e8re \u00e0 la derni\u00e8re case.</p> <p>La variable compteur (i, j, k, etc..) est utilis\u00e9e pour d\u00e9signer la case (l'index) du tableau \u00e0 traiter.</p> <p>Un tableau commence toujours \u00e0 l'index (num\u00e9ro de la case) 0, donc on donne au compteur (ex: i, j, k) la valeur de 0 pour commencer.</p> <p>Un tableau fini toujours \u00e0 la case dont l'index est : le nombre d'\u00e9l\u00e9ments (cases) du tableau - 1. Donc on met la condition de fin de la boucle \u00e0 : compteur &lt; nombre d'\u00e9lements.</p> <pre><code>// Boucle g\u00e9n\u00e9rale pour parcourir un tableau\n// Ici on assigne un nombre al\u00e9atoire de 0 \u00e0 100 pour chaque \u00e9l\u00e9ment du tableau\nRandom rng = new Random();\nint[] tab = new int[30];\n\nfor(int i = 0; i &lt; tab.Length; i++)\n{\n    tab[i] = rng.Next(0,101);\n}\n</code></pre>"},{"location":"github/","title":"Utilisation de Github avec Classroom dans le cadre du cours","text":"<p>Il faut avoir Git install\u00e9 sur votre poste de travail avec la console Git (Git Bash)</p>"},{"location":"github/#methode-a-revoir","title":"M\u00e9thode \u00e0 revoir","text":""},{"location":"lecture-ecriture/","title":"Lecture et \u00e9criture","text":""},{"location":"lecture-ecriture/#affichage-a-la-console","title":"Affichage \u00e0 la console","text":"<p><code>Console.WriteLine()</code></p> <pre><code>// Afficher une phrase directement\nConsole.WriteLine(\"Voici ma phrase\");\n\n// Afficher le contenu d'une variable, m\u00eame si c'est autre chose qu'une phrase\nConsole.WriteLine(maVariable);\n\n// Afficher une combinaison de variables et de phrases\nConsole.WriteLine(\"Je crois que ma variable contient : \" + maVariable + \" un entier positif\" );\n</code></pre>"},{"location":"lecture-ecriture/#lecture-a-la-console","title":"Lecture \u00e0 la console","text":"<p>La m\u00e9thode <code>Console.ReadLine()</code> lit une entr\u00e9e de l'utilisateur \u00e0 la console mais il faut assigner le r\u00e9sultat \u00e0 une variable pour l'utiliser.</p> <p>Cette m\u00e9thode nous donne toujours un string</p> <p>Si on veut lire autre chose, il faudra le convertir dans le bon type par la suite!</p> <pre><code>string valeurSaisie = \"\";\nint valeur = 0;\n\nvaleurSaisie = Console.ReadLine();\nint.TryParse(valeurSaisie, out valeur);\n</code></pre>"},{"location":"methode/","title":"M\u00e9thodes","text":"<p>Un m\u00e9thode est une s\u00e9rie d'instructions qui effectue une une t\u00e2che sp\u00e9cifique.</p> <p>Elle peut simplement ex\u00e9cuter les instructions mais elle peut aussi nous envoyer une r\u00e9sultat.</p> <p>La m\u00e9thode que retourne un r\u00e9sulat est aussi appl\u00e9e une fonction. Par exemple : <code>Console.Readline()</code> nous renvoie un string</p> <p>La m\u00e9thode sans valeur de retour est une proc\u00e9dure : <code>Console.WriteLine(monTexte)</code> affiche mais nous n'avons pas de valeur \u00e0 assigner</p>"},{"location":"methode/#la-methode-main","title":"La m\u00e9thode Main","text":"<p>Lorsque l'on cr\u00e9e un nouveau projet avec Visual Studio, il ajoute automatiquement un m\u00e9thode Main.</p> <p>Cette m\u00e9thode est ex\u00e9cut\u00e9e au d\u00e9marrage du programme. Elle contient toutes les instructions et les m\u00e9thodes personnalis\u00e9es du programmeur.</p> <pre><code>using System;\n\nnamespace ExercicesSemaine1\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n\n        }\n    }\n}\n</code></pre>"},{"location":"methode/#declaration","title":"D\u00e9claration","text":"<p>Une m\u00e9thode est d\u00e9clar\u00e9e \u00e0 l'int\u00e9rieur d'une classe.</p> <p>Une m\u00e9thode est \u00e0 l'ext\u00e9rieur des autres m\u00e9thodes.</p> <p>Dans le programme principal, il faut toujours ajouter le mot cl\u00e9 <code>static</code> avant le type de la m\u00e9thode.</p> <p>Une m\u00e9thode commence par le type de retour, suivi de son nom et de parenth\u00e8ses.</p> <p>Quand une m\u00e9thode n'a pas de retour (de r\u00e9sultat) son type est <code>void</code>.</p> <p>Une m\u00e9thode a ses propres variables, elle ne peut pas utiliser les variables d'une autre m\u00e9thode directement.</p> <p>Une m\u00e9thode est une action, son nom est un verbe et commence par une minuscule</p>"},{"location":"methode/#procedure-methode-qui-effectue-un-travail-mais-ne-retourne-pas-de-resultat","title":"Proc\u00e9dure : m\u00e9thode qui effectue un travail mais ne retourne pas de r\u00e9sultat","text":"<pre><code>using System;\n\nnamespace ExercicesSemaine1\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n\n        }\n\n        // nouvelles m\u00e9thodes \n\n        // m\u00e9thode qui effectue une t\u00e2che mais ne donne pas de r\u00e9sultat\n        // static est avant le type puisqu'il s'agit du programme principal\n        // la m\u00e9thode ne retourne pas de r\u00e9sultat donc son type est void\n\n        static void afficherMessage()\n        {\n            string message = \"Bonjour\";\n            Console.WriteLine(message);\n        }\n    }\n}\n\n</code></pre>"},{"location":"methode/#fonction-methode-qui-retourne-une-resultat","title":"Fonction : m\u00e9thode qui retourne une r\u00e9sultat","text":"<p>L'instruction pour renvoyer un r\u00e9sultat est : <code>return</code>.</p> <p>Pour utiliser le r\u00e9sultat d'une fonction on peut:</p> <ul> <li>Assigner le r\u00e9sultat \u00e0 une variable</li> <li>Utiliser la fonction \u00e0 la place d'une variable dans une instruction</li> </ul> <p>Quand une m\u00e9thode retourne un r\u00e9sultat il faut d\u00e9signer le type de retour dans sa d\u00e9claration</p> <pre><code>using System;\n\nnamespace ExercicesSemaine1\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            double moyenne = 0;\n\n            // Assignation du r\u00e9sultat \u00e0 une variable\n            moyenne = calculerMoyenne();\n\n            // Utilisation directe dans une instruction\n            Console.WriteLine(calculerMoyenne());\n        }\n\n        // nouvelles m\u00e9thodes \n\n        // m\u00e9thode qui retourne un r\u00e9sultat\n        // static est avant le type puisqu'il s'agit du programme principal\n        // la m\u00e9thode retourne un r\u00e9sultat donc son type est le m\u00eame que le type de la valeur retourn\u00e9e\n\n        static double calculerMoyenne()\n        {\n            double note1 = 66;\n            double note2 = 95;\n            double note3 = 78;\n            double moyenne = 0;\n\n            moyenne = (note1 + note2 + note3) / 3;\n\n            return moyenne;\n        }\n    }\n}\n</code></pre>"},{"location":"methode/#parametres-de-fonctions","title":"Param\u00e8tres de fonctions","text":"<p>Les m\u00e9thodes sont toujours suivient de parenth\u00e8ses. </p> <p>Elles servent \u00e0 transmettre de l'information pour qu'elle puisse faire son travail.</p> <p>Par exemple, le contenu des prenth\u00e8ses dans <code>Console.WriteLine(\"Mon message\")</code> dit \u00e0 la m\u00e9thode quel message afficher.</p> <p>Ce qui est envoy\u00e9 \u00e0 la m\u00e9thode doit \u00eatre d\u00e9fini lors de la d\u00e9claration de la m\u00e9thode.</p> <p>Par exemple si une m\u00e9thode a besoin d'un nombre entier pour faire son travail la d\u00e9claration serait :</p> <pre><code>static void maMethode(int nombreEntier)\n{\n    // instructions\n}\n</code></pre> <p>Quand on utilise la m\u00e9thode dans notre Main, on sera oblig\u00e9 de donner un nombre entier (ou une variable contenant un nombre enteir) \u00e0 la m\u00e9thode :</p> <pre><code>// Exemple 1 \nmaMethode(7);\n\n// Exemple 2 avec une variable\nint variable = 5;\nmaMethode(variable);\n</code></pre> <p>La valeur donn\u00e9e dans le main est copi\u00e9e dans la variable param\u00e8tre de la m\u00e9thode.</p>"},{"location":"methode/#declaration-dune-methode-avec-des-parametres","title":"D\u00e9claration d'une m\u00e9thode avec des param\u00e8tres","text":"<pre><code>static void calculerExposant(int nombre, int exposant)\n{\n    int resultat = 0;\n\n    resultat = Math.Pow(nombre, exposant);\n\n    Console.WriteLine(\"R\u00e9sultat : \" + resultat);\n}\n</code></pre> <p>Ici, les param\u00e8tres sont nombre et exposant, de type int</p> <p>Chacune des variables d\u00e9clar\u00e9e de cette fa\u00e7on sera utilisable uniquement dans la m\u00e9thode.</p>"},{"location":"methode/#utilisation-dune-methode-avec-parametres","title":"Utilisation d'une m\u00e9thode avec param\u00e8tres","text":"<p>On utilise une m\u00e9thode avec param\u00e8tres de la m\u00eame fa\u00e7on que les autre.</p> <p>Les param\u00e8tres sont s\u00e9par\u00e9s par des virgules.</p> <p>Il faut lui donner les param\u00e8tres dans l'ordre o\u00f9 ils ont \u00e9t\u00e9 d\u00e9clar\u00e9s.</p> <p>Si on utilise la m\u00e9thode pr\u00e9c\u00e9dente :</p> <p><code>calculerExposant(2, 5)</code> Le r\u00e9sultat \u00e0 la console sera 32</p> <p><code>calculerExposant(5, 2)</code> Le r\u00e9sultat \u00e0 la console sera 25</p>"},{"location":"operateurs/","title":"Op\u00e9rateurs","text":""},{"location":"operateurs/#operateurs-mathematiques","title":"Op\u00e9rateurs math\u00e9matiques","text":"<ul> <li>Les calculs utilisent les m\u00eame op\u00e9rateurs qu'en math\u00e9matique</li> <li>On assigne le r\u00e9sultat \u00e0 une variable</li> </ul> <pre><code>int total;\ntotal = 65 + 78 + 22;\n</code></pre>"},{"location":"operateurs/#les-operateurs","title":"Les op\u00e9rateurs","text":"<ul> <li>Addition : +</li> <li>Soustraction : -</li> <li>Multiplication : * (\u00e9toile)</li> <li>Division : / (barre oblique)</li> <li>Reste d'une division : % (ex: 13 % 5 = 3 parce que 13/5 = 2 et reste 3)</li> </ul>"},{"location":"operateurs/#les-priorites","title":"Les priorit\u00e9s","text":"<p>Certains op\u00e9rateurs passent en premier. Par exemple les multiplications se font avant les additions.  1 + 3 * 2 donne 7 parce que 3 * 2 passe avant 1 + 3</p> <p>Si ce n'\u00e9tait pas d\u00e9fini on ne serait pas s\u00fbr du r\u00e9sultat!</p> <p>Pour sp\u00e9cifier qu'une partie est prioritaire il faut l'entourer avec des parenth\u00e8ses. (1 + 3) * 2 donne 8 parce qu'on force l'addition en premier avec les parenth\u00e8ses.</p> <p>En ordre de priorit\u00e9 :</p> <ol> <li>()</li> <li>*, /, %</li> <li>+, -</li> </ol>"},{"location":"operateurs/#operateurs-de-comparaison","title":"Op\u00e9rateurs de comparaison","text":"<p>Pour comparer 2 expression ces op\u00e9rateurs sont disponibles. Ils ont tous la m\u00eame priorit\u00e9 et passe apr\u00e8s tous les op\u00e9rateurs arithm\u00e9tiques</p> <ul> <li>\u00c9galit\u00e9 : ==</li> <li>Diff\u00e9rent : !=</li> <li>Plus petit / grand : &lt; &gt;</li> <li>Plus petit / grand ou \u00e9gal : &lt;= &gt;=</li> </ul> <p>Le r\u00e9sultat d'une comparaision donne une valeur logique, soit vrai ou faux.</p> <p>3 == 4 donne faux</p> <p>3 &lt;= 4 donne vrai</p>"},{"location":"operateurs/#operateurs-logiques","title":"Op\u00e9rateurs logiques","text":"<p>Selon les circonstances il sera n\u00e9cessaire de v\u00e9rifier le r\u00e9sultat de plusieurs comparaisons ou valeurs logiques (vrai ou faux). Par exemple :</p> <ul> <li>Pour conduire il faut avoir son permis et avoir une auto</li> <li>Au lieu de v\u00e9rifier ces deux conditions une apr\u00e8s l'autre on peut les v\u00e9rifier en m\u00eame temps avec l'op\u00e9rateur logique ET</li> </ul>"},{"location":"operateurs/#les-operateurs_1","title":"Les op\u00e9rateurs","text":"<p>Ils sont plac\u00e9s en ordre de priorit\u00e9!</p> <ul> <li>Non (inverse la valeur logique) : ! vrai devient faux</li> <li>ET : &amp;&amp; </li> <li>OU : ||</li> </ul> <p>Exemple d'op\u00e9ration logique ET avec une condition if</p> <pre><code>bool permis = vrai;\nbool automobile = vrai;\nbool peutConduire = faux;\n\nif(permis &amp;&amp; automobile)\n{\n    Console.Writeline(\"Tu peux conduire!\");\n    peutConduire = vrai;\n}\n</code></pre>"},{"location":"si/","title":"Condition","text":"<p>La condition est une instruction qui permet de contr\u00f4ler notre programe :</p> <ul> <li>Dans un jeu, si le joueur n'a plus de vie le jeu arr\u00eate</li> <li>Si je paie le caissier du Chic-Choco-Latt\u00e9, j'obtiens ma cr\u00e8me glac\u00e9\u00e9</li> <li>Si le total de mon panier sur amazon.ca d\u00e9passe 75$ je n'ai pas de frais de livraison</li> </ul> <p>Le programme qui utilise un condition prend en fait une d\u00e9cision selon les donn\u00e9es</p>"},{"location":"si/#linstruction-si","title":"L'instruction SI","text":"<p>l'instruction SI ... ALORS ... SINON est utili\u00e9e pour la prise de d\u00e9cision</p> <p>SI ma condition est vraie ALORS     faire les instructions du bloc 1 SINON     faire les instructions du bloc 2</p> <ul> <li>La partie SINON n'est pas obligatoire mais la plupart du temps n\u00e9cessaire pour le bon fonctionnement du programme.</li> <li>La condition doit avoir une valeur VRAI ou FAUX</li> <li>La condition est soit une variable de type bool, une compraison ou une combinaison de plusieurs bool/comparaisons.</li> </ul>"},{"location":"si/#syntaxe-en-c","title":"Syntaxe en C#","text":"<pre><code>// Instructions avant la prise de d\u00e9cision\n\nif(condition)\n{\n    // Instructions si la condition est vraie\n}\nelse\n{\n    // Instruction si la condition est fausse\n}\n\n// Instructions apr\u00e8s la d\u00e9cision\n</code></pre>"},{"location":"si/#exemples-en-c","title":"Exemples en C#","text":"<pre><code>string choix=\"\";\ndouble prixSushis = 15.97;\ndouble total = 0.0; \n\nConsole.WriteLine(\"Entrer le choix de menu : \");\nchoix = Console.ReadLine();\n\nif(choix == \"Sushis\")\n{\n    total = total + prixSushis\n}\n\nConsole.WriteLine(\"Total : \" + total + \"$\");\n</code></pre> <pre><code>int age = 0;\n\nConsole.Writeline(\"Quel est votre \u00e2ge? \");\nint.TryParse(Console.ReadLine(), out age);\n\nif(age &gt; 18)\n{\n    Console.WriteLine(\"Vous pouvez voter\");\n}\nelse\n{\n    Console.WriteLine(\"Vous ne pouvez pas voter\");\n}\n</code></pre>"},{"location":"si/#sinon-si","title":"SINON SI","text":"<p>Il est possible de prendre une d\u00e9cision plus complexe en comparant une variable avec plusieurs possibilit\u00e9s</p> <p>SI ma premi\u00e8re comparaison est vraie ALORS</p> <pre><code>faire les instructions du bloc 1\n</code></pre> <p>SINON SI ma deuxi\u00e8me compraison est vraie ALORS</p> <pre><code>faire les instructions du bloc 2\n</code></pre> <p>... On peut en faire autant que l'on veut et finalement</p> <p>SINON</p> <pre><code>faire les instruction quand je n'ai rien eu de vrai\n</code></pre>"},{"location":"si/#syntaxe-en-c_1","title":"Syntaxe en C#","text":"<pre><code>// Instructions avant la prise de d\u00e9cision\n\nif(condition)\n{\n    // Instructions si la condition 1 est vraie\n}\nelse if(autre condition)\n{\n    // Instruction si la condition  2 est vraie\n}\n...\nelse\n{\n    // Instruction quand je n'ai trouv\u00e9 aucune conditioin vraie\n}\n\n// Instructions apr\u00e8s la d\u00e9cision\n</code></pre>"},{"location":"si/#exemple-en-c","title":"Exemple en C#","text":"<pre><code>int nombre = 0;\n\nConsole.WriteLine(\"Entrer le choix de menu : \");\nint.TryParse(Console.ReadLine(), out nombre);\n\nif(nombre == 1)\n{\n    Console.WriteLine(\"Vos Sushis seront livr\u00e9s bient\u00f4t\");\n}\nelse if(nombre == 2)\n{\n    Console.WriteLine(\"Votre tartare sera livr\u00e9 bient\u00f4t\");\n}\nelse if(nombre == 3)\n{\n    Console.WriteLine(\"Vos rouleaux de printemps seront livr\u00e9s bient\u00f4t\");\n}\nelse\n{\n    Console.WriteLine(\"Choix non valide.\");\n}\n</code></pre>"},{"location":"solBouclesTableaux/","title":"Solutions possibles aux exercices de boulces avec tableau","text":"<pre><code>static int q1_trouverMax(int[] tabNombres)\n{\n    int max = tabNombres[0];\n\n    for (int i = 1; i &lt; tabNombres.Length; i++)\n    {\n        if (tabNombres[i] &gt; max)\n        {\n            max = tabNombres[i];\n        }\n    }\n\n    return max;\n}\n</code></pre> <pre><code>static int q2_trouverNbOccurenceLettre(char lettre, string mot)\n{\n    int nbOccurence = 0;\n\n    for (int i = 0; i &lt; mot.Length; i++)\n    {\n        if (mot[i] == lettre)\n        {\n            nbOccurence++;\n        }\n    }\n\n    return nbOccurence;\n}\n</code></pre> <pre><code>static int q3_trouverPremiereLettre(char lettre, string mot)\n{\n    int position = 0;\n    bool pasTrouve = true;\n\n    while (position &lt; mot.Length &amp;&amp; pasTrouve)\n    {\n        if (mot[position] == lettre)\n        {\n            pasTrouve = false;\n        }\n\n        position++;\n    }\n\n    if (pasTrouve)\n    {\n        position = -1;\n    }\n\n    return position;\n}\n</code></pre> <pre><code>static void q4_afficherNbVraiEtFaut(bool[] tableau)\n{\n    int nbVrai = 0;\n    int nbFaux = 0;\n\n    for (int i = 0; i &lt; tableau.Length; i++)\n    {\n        if (tableau[i])\n        {\n            nbVrai++;\n        }\n        else\n        {\n            nbFaux++;\n        }\n    }\n\n    Console.WriteLine(\"NbVrai : {0}, NbFaux : {1}\", nbVrai, nbFaux);\n}\n</code></pre> <pre><code>static void q5_afficherSequence(int[] tabZeroUn)\n{\n    int maxSequence = 0;\n    int sequence = 0;\n\n    for (int i = 0; i &lt; tabZeroUn.Length; i++)\n    {\n        if (tabZeroUn[i] == 1)\n        {\n            sequence++;\n            if (sequence &gt; maxSequence)\n            {\n                maxSequence = sequence;\n            }\n        }\n        else\n        { \n            sequence = 0;\n        }\n    }\n\n    for (int i = 0; i &lt; maxSequence; i++)\n    {\n        Console.Write(1);\n    }\n}\n</code></pre>"},{"location":"solDnd/","title":"Solution possible au laboratoire : DnD","text":"<pre><code>static void Main(string[] args)\n{\n    Random rng = new Random();\n    int optionMenu = 0;\n    string menu = \"DnD Lite\\n 1. Afficher les stats des adversaires\\n 2. Simuler le combat\\n 3. Historique du dernier combat\\n 4. Quitter\";\n    string historique = \"\";\n\n    int[] statsGuerrier = new int[5];\n    int[] statsOrc = new int[5];\n\n    statsGuerrier[0] = 30;\n    statsGuerrier[1] = rng.Next(14, 19);\n    statsGuerrier[2] = 18;\n    statsGuerrier[3] = 8;\n    statsGuerrier[4] = 2 + calculerBonusDmg(statsGuerrier[1]);\n\n    statsOrc[0] = 30;\n    statsOrc[1] = rng.Next(10, 19);\n    statsOrc[2] = 14;\n    statsOrc[3] = 10;\n    statsOrc[4] = 2 + calculerBonusDmg(statsOrc[1]);\n\n    while (optionMenu != 4)\n    {\n        optionMenu = choisirOptionMenu(menu, 4);\n\n        Console.Clear();\n\n        if (optionMenu == 1)\n        {\n            afficherStats(statsGuerrier, \"Guerrier\");\n            afficherStats(statsOrc, \"Orc\");\n\n        }\n        else if (optionMenu == 2)\n        {\n            historique = simulerCombat(statsGuerrier, statsOrc);\n        }\n        else if (optionMenu == 3)\n        {\n            Console.WriteLine(historique);\n        }\n\n        if (optionMenu != 4)\n        {\n            Console.WriteLine(\"Appuyer sur une touche pour continuer\");\n            Console.ReadKey();\n        }\n    }\n}\n\nstatic int calculerBonusDmg(int statAtt)\n{\n    return (statAtt - 9)/2;\n}\nstatic int choisirOptionMenu(string menu, int nbOptions)\n{\n    int choix = 0;\n\n    while (choix &lt; 1 || choix &gt; nbOptions)\n    {\n        Console.Clear();\n        Console.WriteLine(menu);\n        int.TryParse(Console.ReadLine(), out choix);\n    }\n\n    return choix;\n}\n\nstatic void afficherStats(int[] stats, string nom)\n{\n    Console.WriteLine(nom);\n    Console.WriteLine(\"Hp : \" + stats[0]);\n    Console.WriteLine(\"Att : \" + stats[1]);\n    Console.WriteLine(\"Def : \" + stats[2]);\n}\n\nstatic string simulerCombat(int[] statsJoueur, int[] statsEnnemi)\n{\n    Random rng = new Random();\n    int initiativeJoueur = 0;\n    int initiativeEnnemi = 0;\n    int dommage = 0;\n    int round = 0;\n    string historique = \"\";\n\n    while (statsJoueur[0] &gt; 0 &amp;&amp; statsEnnemi[0] &gt; 0)\n    {\n        round++;\n        historique += $\"\\n#############\\nRound {round}\\n\";\n        initiativeJoueur = rng.Next(1, 21);\n        initiativeEnnemi = rng.Next(1, 21);\n\n        if (initiativeJoueur &gt;= initiativeEnnemi)\n        {\n            historique += \"Guerrier en premier \\n\\n\";\n            dommage = attaquer(statsJoueur, statsEnnemi);\n            if (dommage &gt; 0)\n            {\n                historique += \"Le guerrier frappe pour \" + dommage + \" points de dommage \\n\";\n                statsEnnemi[0] -= dommage;\n            }\n            else\n            {\n                historique += \"Le guerrier rate!\\n\";\n            }\n            dommage = attaquer(statsEnnemi, statsJoueur);\n            if (dommage &gt; 0)\n            {\n                historique += \"L'orc frappe pour \" + dommage + \" points de dommage \\n\";\n                statsJoueur[0] -= dommage;\n            }\n            else\n            {\n                historique += \"L'orc rate!\\n\";\n            }\n        }\n        else \n        {\n            historique += \"Orc en premier \\n\\n\";\n            dommage = attaquer(statsEnnemi, statsJoueur);\n            if (dommage &gt; 0)\n            {\n                historique += \"L'orc frappe pour \" + dommage + \" points de dommage\\n\";\n                statsJoueur[0] -= dommage;\n            }\n            else\n            {\n                historique += \"L'orc rate!\\n\";\n            }\n            dommage = attaquer(statsJoueur, statsEnnemi);\n            if (dommage &gt; 0)\n            {\n                historique += \"Le guerrier frappe pour \" + dommage + \" points de dommage \\n\";\n                statsEnnemi[0] -= dommage;\n            }\n            else\n            {\n                historique += \"Le guerrier rate!\\n\";\n            }\n        }\n        historique += \"Hp guerrier : \" + statsJoueur[0] + \" // Hp orc : \" + statsEnnemi[0] + \"\\n\";\n    }\n\n    Console.WriteLine(\"Hp guerrier : \" + statsJoueur[0] + \" // Hp orc : \" + statsEnnemi[0]);\n\n    return historique;\n}\n\nstatic int attaquer(int[] statsJoueur, int[] statsEnnemi)\n{\n    Random rng = new Random();\n    int d20 = 0;\n    int dommage = 0;\n\n    d20 = rng.Next(1, 21);\n    if (d20 &gt; statsEnnemi[2])\n    {\n        dommage = rng.Next(1, statsJoueur[3] + 1) + statsJoueur[4];\n    }\n\n    return dommage;\n}\n</code></pre>"},{"location":"solPOO/","title":"Solutions possibles aux exercices de POO (1 \u00e0 3)","text":""},{"location":"solPOO/#1-classe-eleve","title":"1. Classe Eleve","text":"<pre><code>public class Eleve\n{\n    public string nom;\n    public string prenom;\n    public string da;\n    public int[] notes;\n    public int position;\n\n    public Eleve(string nom, string prenom, string da, int nbNotes)\n    {\n        this.nom = nom;\n        this.prenom = prenom;\n        this.da = da;\n        this.notes = new int[nbNotes];\n        this.position = 0;\n    }\n\n    public void ajouterNote(int note)\n    {\n        if (this.position &gt;= this.notes.Length)\n        {\n            int[] nouvTableau = new int[this.notes.Length + 1];\n            for(int i = 0; i &lt; this.notes.Length; i++)\n            {\n                nouvTableau[i] = this.notes[i];\n                this.notes = nouvTableau;\n            }\n        }\n        this.notes[this.position] = note;\n        this.position++;\n    }\n\n    public double calculerMoyenne()\n    {\n        int total = 0;\n        double moyenne = 0.0;\n\n        for (int i = 0; i &lt; this.notes.Length; i++)\n        {\n            total = total + notes[i];\n        }\n\n        moyenne = total / this.notes.Length;\n\n        return moyenne;\n    }\n\n}\n</code></pre>"},{"location":"solPOO/#2-classe-fraction","title":"2. Classe Fraction","text":"<pre><code>public class Fraction\n{\n    public int numerateur;\n    public int denominateur;\n\n    public Fraction(int numerateur, int denominateur)\n    {\n        this.numerateur = numerateur;\n        if(denominateur == 0)\n        {\n            this.denominateur = 1;\n        }\n        else \n        {\n            this.denominateur = denominateur;\n        } \n    }\n}\n</code></pre>"},{"location":"solPOO/#3-classe-arme","title":"3. Classe Arme","text":"<pre><code>public class Arme\n{\n    public string nom;\n    public int dmgMax;\n    public int bonusMagic;\n\n    public Arme(string nom, int dmgMax)\n    {\n        Random rng = new Random();\n        this.nom = nom;\n        this.dmgMax = dmgMax;\n\n        // L'arme a 5% de chances d'\u00eatre magique\n        if (rng.Next(0, 101) &lt;= 5)\n        {\n            int rngBonus = rng.Next(0, 10001);\n            if (rngBonus &lt;= 1)\n            {\n                this.bonusMagic = 5;\n            }\n            else if (rngBonus &lt;= 6)\n            {\n                this.bonusMagic = 4;\n            }\n            else if (rngBonus &lt;= 56)\n            {\n                this.bonusMagic = 3;\n            }\n            else if (rngBonus &lt;= 156)\n            {\n                this.bonusMagic = 2;\n            }\n            else if (rngBonus &lt;= 356)\n            {\n                this.bonusMagic = 1;\n            }\n            else\n            {\n                this.bonusMagic = 0;\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"solPOO/#4-classe-caracteristique","title":"4. Classe Caracteristique","text":""},{"location":"solPOO/#5-classe-tableau-dynamique-et-programme","title":"5. Classe Tableau dynamique et programme","text":""},{"location":"solPOO/#51-tableaudynamique","title":"5.1 TableauDynamique","text":"<pre><code>public class TableauDynamique\n{\n    double[] tab;\n    int cnt;\n    public TableauDynamique()\n    {\n        this.tab = new double[10];\n        this.cnt = 0;\n    }\n\n    public void ajouterNombre(double nombre)\n    {\n        // Si le nombre de donn\u00e9\n        if (this.cnt &lt; this.tab.Length)\n        {\n            this.tab[this.cnt] = nombre;\n            this.cnt++;\n        }\n        else \n        {\n            // Nouveau tableau de 1.5 fois la longueur\n            double[] nouvTab = new double[this.tab.Length + this.tab.Length/2];\n            // Copier les donn\u00e9es du tableau actuel dans le nouveau tableau\n            for (int i = 0; i &lt; this.tab.Length; i++)\n            {\n                nouvTab[i] = this.tab[i];\n            }\n            // Remplacer le tableau actuel par le nouveau tableau\n            this.tab = nouvTab;\n\n            this.tab[this.cnt] = nombre;\n            this.cnt++;\n        }\n    }\n\n    public double calculerTotal()\n    {\n        double total = 0.0;\n\n        for (int i = 0; i &lt; this.cnt; i++)\n        {\n            total += this.tab[i];\n        }\n\n        return total;\n    }\n\n    public double calculerMoyenne()\n    { \n        return this.calculerTotal()/ this.cnt;\n    }\n\n    public double calculerMediane()\n    {\n        double mediane = 0;\n\n        this.trierAsc();\n\n        int position = this.cnt / 2;\n\n        if (this.cnt % 2 == 0)\n        {\n\n\n            mediane = (this.tab[position] + this.tab[position - 1])/2;\n        }\n        else\n        {\n            mediane = this.tab[position];\n        }\n\n        return mediane;\n    }\n\n    public double calculerEcartType()\n    {\n        double moyenne = this.calculerMoyenne();\n        double sommeCarreEcart = 0.0;\n        double ecartType = 0.0;\n\n        for (int i = 0; i &lt; this.cnt; i++)\n        {\n            sommeCarreEcart += Math.Pow(this.tab[i] - moyenne, 2);\n        }\n        sommeCarreEcart /= this.cnt - 1;\n\n        ecartType = Math.Sqrt(sommeCarreEcart);\n\n        return ecartType;\n    }\n\n    public void trierAsc()\n    {\n        // Classer mon tableau du plus petit au plus grand\n        // pour chaque case du tableau\n        for (int i = 0; i &lt; this.cnt; i++)\n        {\n            // trouver l'index(la position) de la note minimum du tableau restant\n            int positionMin = trouverMin(i);\n            // \u00e9change la note \u00e0 la position minimum avec la note \u00e0 la position actuelle\n            double temp = this.tab[positionMin];\n            this.tab[positionMin] = this.tab[i];\n            this.tab[i] = temp;\n        }\n    }\n\n    public int trouverMin(int depart)\n    {\n        int positionMin = depart;\n\n        for (int i = depart; i &lt; this.cnt; i++)\n        {\n            if (this.tab[i] &lt; this.tab[positionMin])\n            {\n                positionMin = i;\n            }\n        }\n\n        return positionMin;\n    }\n}\n</code></pre>"},{"location":"solPOO/#52-programme-principale","title":"5.2 Programme principale","text":"<pre><code>static void Main(string[] args)\n{\n    double note = 0.0;\n    TableauDynamique tabNotes = new TableauDynamique();\n\n    int option = 1;\n\n    while (note &gt;= 0.0)\n    {\n        Console.Clear();\n        Console.WriteLine(\"Entrer les notes de votre groupe, note n\u00e9gative pour arr\u00eater\");\n\n        double.TryParse(Console.ReadLine(), out note);\n\n        if (note &gt;= 0.0)\n        {\n            tabNotes.ajouterNombre(note);\n        }\n    }\n\n\n    while (option &gt; 0 &amp;&amp; option &lt; 5)\n    {\n        Console.Clear();\n        Console.Write(\"Choisir une option 1-4\\n 1. Moyenne\\n 2. Mediane\\n 3. Ecart type\\n 4. Quitter\");\n        int.TryParse(Console.ReadLine(), out option);\n        switch (option)\n        {\n            case 1:\n                Console.WriteLine(\"Moyenne : {0}\", tabNotes.calculerMoyenne());\n                break;\n            case 2:\n                Console.WriteLine(\"Mediane : {0}\", tabNotes.calculerMediane());\n                break;\n            case 3:\n                Console.WriteLine(\"Ecart type {0}\", tabNotes.calculerEcartType());\n                break;\n            case 4:\n                Console.WriteLine(\"Fin\");\n                break;\n            default:\n                Console.WriteLine(\"Option invalide\");\n                option = 1;\n                break;\n        }\n        Console.WriteLine(\"Appuyer sur une touche pour continuer\");\n        Console.ReadKey();\n    }\n}\n</code></pre>"},{"location":"solPendu/","title":"Solution possible au laboratoire : Jeu du pendu","text":"<pre><code>static void Main(string[] args)\n{\n    Random random = new Random();\n    // Les mots pour deviner\n    string[] mots = { \"boucle\", \"condition\", \"variable\" };\n    string mot = mots[random.Next(0, mots.Length)];\n    string motCache = \"\";\n    string lettre = \"\";\n    bool lettreDansMot = false;\n    bool motDevine = false;\n    int essai = 5;\n\n    for (int i = 0; i &lt; mot.Length; i++)\n    {\n        motCache += \"*\";\n    }\n\n    // Afficher les instructions\n    Console.WriteLine(\"Bienvenue au jeu du pendu, vous devez trouver toutes les lettres d'un mot au hasard. \\n\\n Chaque fois que vous choisissez une lettre : \\n - Les lettres sont affich\u00e9es \u00e0 la bonne place dans le mot cach\u00e9\\n ou \\n - Un essai de moins \\n\\n La partie est gagn\u00e9e quand toutes les lettre sont trouv\u00e9es\\n ou perdues quand il n'y a plus d'essai \\n Enter pour continuer.\");\n    Console.ReadLine();\n\n    // Choisir un mot \u00e0 deviner\n    // Fait en m\u00eame temps que l'initialisation de la variable mot\n\n    // Tant que je n'ai pas devin\u00e9 le mot et que j'ai des essais\n    while(!motDevine &amp;&amp; essai &gt; 0)\n    {\n        // Demander \u00e0 l'utilisateur une lettre\n        Console.Clear();\n        Console.WriteLine(\"Entrer une lettre :\");\n        lettre = Console.ReadLine();\n\n        // V\u00e9rifier si la lettre est dans le mot\n        lettreDansMot = verifierSiLettreDansMot(mot, lettre);\n\n        // Si la lettre est dans le mot \n        if (lettreDansMot)\n        {\n            // Ajuster le mot cach\u00e9\n            motCache = ajusterMotCache(mot,motCache, lettre);\n        }\n        // Sinon perd un essai\n        else\n        {\n            essai--;\n        }\n\n        // V\u00e9rifier si le mot est complet\n        if (motCache == mot)\n        {\n            motDevine = true;\n        }\n\n        // Afficher r\u00e9sultat du tour\n        Console.WriteLine(\"Mot : \" + motCache);\n        Console.WriteLine(\"Essais restant : \" + essai);\n        Console.WriteLine(\"Appuyer sur Entrer pour continuer.\");\n        Console.ReadLine();\n    }\n\n    // Afficher le r\u00e9sultat\n    if (motDevine)\n    {\n        Console.WriteLine(\"Gagn\u00e9!\");\n    }\n    else\n    {\n        Console.WriteLine(\"Perdu...\");\n    }\n}\n\nstatic bool verifierSiLettreDansMot(string mot, string lettre)\n{\n    bool present = false;\n\n    for (int i = 0; i &lt; mot.Length; i++)\n    {\n        if (mot[i] == lettre[0])\n        {\n            present = true;\n        }\n    }\n    return present;\n}\n\nstatic string ajusterMotCache(string mot, string motCache, string lettre)\n{\n    string nouveauMotCache = \"\";\n\n    for (int i = 0; i &lt; mot.Length; i++)\n    {\n        if (mot[i] == lettre[0])\n        {\n            nouveauMotCache += lettre[0];\n        }\n        else\n        {\n            nouveauMotCache += motCache[i];\n        }\n    }\n\n    return nouveauMotCache;\n}\n</code></pre>"},{"location":"solSem1/","title":"Solutions possibles aux exercices de la semaine 1","text":"<pre><code>static void exercice1()\n{\n    // On a besion de la largeur et de la longueur du rectangle\n    // et de 2 autres variables pour leur assigner les r\u00e9sultats les r\u00e9sultats\n    int largeur = 0;\n    int longueur = 0;\n    int permietre = 0;\n    int aire = 0;\n\n    // Saisie de la largeur et de la longueur\n    Console.WriteLine(\"Largeur : \");\n    int.TryParse(Console.ReadLine(), out largeur);\n\n    Console.WriteLine(\"Longueur : \");\n    int.TryParse(Console.ReadLine(), out longueur);\n\n    // Calcul de l'aire et du p\u00e9rim\u00e8tre\n    permietre = (largeur + longueur) * 2;\n    aire = largeur * longueur;\n\n    // Affichage des r\u00e9sultats\n    Console.WriteLine(\"P\u00e9rim\u00e8tre : \" + permietre);\n    Console.WriteLine(\"Aire : \" + aire);\n}\n</code></pre> <pre><code>static void exercice2()\n{\n    // On a besoin de savoir combien de bitcoins l'utilisateur poss\u00e8de\n    // Une variable pour le taux de conversion\n    // Une variable pour lui assigner le r\u00e9sultat de la conversion\n    double bitcoin = 0;\n    double tauxEchange = 62315.32;\n    double valeurDollar = 0;\n\n    // Saisie du nombre de bitcoins\n    Console.WriteLine(\"Combien de Bitcoins? : \");\n    double.TryParse(Console.ReadLine(), out bitcoin);\n\n    // Calcul de la valeur en $ CAD\n    valeurDollar = bitcoin * tauxEchange;\n\n    // Affichage du r\u00e9sultat\n    Console.WriteLine(\"Vous avez : \" + valeurDollar + \"$ CAD en Bitcoins\");\n}\n</code></pre> <pre><code>static void exercice3()\n{\n    // On a besoin de variables pour \n    // les heures travaill\u00e9es\n    // le salaire horaire\n    // le salaire brut annuel\n    double heuresSemaine = 0;\n    double salaireHoraire = 0;\n    double salaireBrutAnnuel = 0;\n\n    // Saisie des heures et du salaire\n    Console.WriteLine(\"Heures travaill\u00e9es par semaine : \");\n    double.TryParse(Console.ReadLine(), out heuresSemaine);\n\n    Console.WriteLine(\"Salaire horaire : \");\n    double.TryParse(Console.ReadLine(), out salaireHoraire);\n\n    // Calcul du salaire annuel\n    salaireBrutAnnuel = heuresSemaine * salaireHoraire * 52;\n\n    // Affichage du salaire brut annuel\n    Console.WriteLine(\"Salaire brut annuel : \" + salaireBrutAnnuel + \"$\");\n}\n</code></pre> <pre><code>static void exercice4()\n{\n    // 3 variables, 1 pour chaque nombre et 1 variable temporaire pour ne pas perdre de valeur\n    int a = 0;\n    int b = 0;\n    int temp = 0;\n\n    // Saisie\n    Console.WriteLine(\"Variable a : \");\n    int.TryParse(Console.ReadLine(), out a);\n\n    Console.WriteLine(\"Variable b : \");\n    int.TryParse(Console.ReadLine(), out b);\n\n    // \u00c9change\n    temp = a;\n    a = b;\n    b = temp;\n\n    // Affichage\n    Console.WriteLine(\"Apr\u00e8s \u00e9change. a = \" + a + \" :: b = \" + b);\n}\n</code></pre> <pre><code>static void exercice5()\n{\n    // Variables pour les 2 nombres \n    int nombre1 = 0;\n    int nombre2 = 0;\n\n    // Saisie des nombres\n    Console.WriteLine(\"Entrer le 1er nombre : \");\n    int.TryParse(Console.ReadLine(), out nombre1);\n\n    Console.WriteLine(\"Entrer le 2\u00e8me nombre : \");\n    int.TryParse(Console.ReadLine(), out nombre2);\n\n    // Comparaison avec test d'\u00e9galit\u00e9 suppl\u00e9mentaire\n    // Affichage dans le bloc d'instructions directement\n\n    // Si le nombre 1 est plus grand, afficher ce nombre\n    if (nombre1 &gt; nombre2)\n    {\n        Console.WriteLine(\"Le nombre 1 : \" + nombre1 + \" est plus grand que le deuxi\u00e8me : \" + nombre2);\n    }\n    // Sinon si le nombre 2 est plus grand, afficher ce nombre\n    else if (nombre2 &gt; nombre1)\n    {\n        Console.WriteLine(\"Le nombre 2 : \" + nombre2 + \" est plus grand que le premier : \" + nombre1);\n    }\n    // Sinon ils sont \u00e9gaux\n    else\n    {\n        Console.WriteLine(\"Les 2 nombres sont \u00e9gaux : \" + nombre1);\n    }\n}\n</code></pre> <pre><code>static void exercice6()\n{\n    // Variables pour les statistiques et le type\n    double force = 0;\n    double agilite = 0;\n    string type = \"feu\";\n\n    // Saisie du type\n    Console.WriteLine(\"Type feu ou eau? : \");\n    type = Console.ReadLine();\n\n    // Calcul des stats finales selon le type\n    // On pourrait v\u00e9rifier que l'utilisateur entre un des bons choix avec else if\n    if (type == \"feu\")\n    {\n        force = force * 1.1;\n        agilite = agilite * 0.85;\n    }\n    else\n    {\n        force = force * 0.9;\n        agilite = agilite * 1.15;\n    }\n\n    // Affichage des stats finales\n    Console.WriteLine(\"Votre type : \" + type + \". Agilite : \" + agilite + \"  :: Force : \" + force);\n}\n</code></pre> <pre><code>static void exercice7()\n{\n    // 3 variables : base, exposant, resultat\n    // on prend le nom nomnbre pour la base pcq le mot base est une instruction en C#\n    int nombre = 0;\n    int exposant = 0;\n    int resultat = 0;\n\n    // Saisie des valeurs \u00e0 la console\n    Console.WriteLine(\"Entrer le nombre : \");\n    int.TryParse(Console.ReadLine(), out nombre);\n\n    Console.WriteLine(\"Entrer l'exposant : \");\n    int.TryParse(Console.ReadLine(), out exposant);\n\n    // D\u00e9terminer et afficher le r\u00e9sultat\n    if (exposant &lt; 0)\n    {\n        Console.WriteLine(\"Je ne peux pas traiter les exposants n\u00e9gatifs\");\n    }\n    else if (exposant == 0)\n    {\n        Console.WriteLine(\"R\u00e9sultat : 1\");\n    }\n    else if (exposant == 1)\n    {\n        resultat = nombre;\n        Console.WriteLine(\"R\u00e9sultat : \" + resultat);\n    }\n    else if (exposant == 2)\n    {\n        resultat = nombre * nombre;\n        Console.WriteLine(\"R\u00e9sultat : \" + resultat);\n    }\n    else if (exposant == 3)\n    {\n        resultat = nombre * nombre * nombre;\n        Console.WriteLine(\"R\u00e9sultat : \" + resultat);\n    }\n    else \n    {\n        Console.WriteLine(\"Attends un peu, je vais voir les boucles la semaine prochaine\");\n    }\n}\n</code></pre>"},{"location":"solSem2/","title":"Solutions possibles aux exercices de la semaine 2","text":"<pre><code>static void ex1()\n{\n    int nombre = 0;\n\n    // Saisir un nombre \u00e0 la console et le convertir en entier\n    Console.WriteLine(\"Entrer un nombre pour le compte \u00e0 rebours : \");\n    int.TryParse(Console.ReadLine(), out nombre);\n\n    // descendre le nombre jusqu'\u00e0 0\n    // pour arr\u00eater \u00e0 1 on utilise la condition : nombre &gt; 0\n    while (nombre &gt;= 0)\n    { \n        Console.WriteLine(nombre);\n        nombre--;\n    }\n}\n</code></pre> <pre><code>static void ex2()\n{\n    int nombre = 1; // le nombre que l'utilisateur entre \u00e0 chaque tour de boucle, on le met \u00e0 1 pour que la boucle commence\n    int positif = 0; // le compteur de nombres positifs\n    int negatif = 0; // le compteur de nombres n\u00e9gatifs\n\n    // \u00c0 chaque tour de boucle on saisit un nombre\n    // Si il est positif on augmente le compteur positif de 1\n    // Sinon si il est n\u00e9gatif on augmente le compteur n\u00e9gatif de 1\n    // La boucle arr\u00eate quand l'utilisateur entre 0 parce que 0 != 0 est FAUX\n    while (nombre != 0)\n    {\n        Console.WriteLine(\"Entrer une nombre entier (0 pour arr\u00eater) : \");\n        int.TryParse(Console.ReadLine(), out nombre);\n\n        if (nombre &gt; 0)\n        {\n            positif++;\n        }\n        else if (nombre &lt; 0)\n        {\n            negatif++;\n        }\n    }\n\n    Console.WriteLine(\"Nombres positifs : \" + positif);\n    Console.WriteLine(\"Nombres n\u00e9gatifs : \" + negatif);\n}\n</code></pre> <pre><code>static void ex3()\n{\n    double note = 0;\n    double total = 0;\n    int nbNotes = 0;\n    double moyenne = 0;\n\n    while (note &gt;= 0)\n    {\n        Console.WriteLine(\"Entre une note (note n\u00e9gative pour arr\u00eater) \");\n        double.TryParse(Console.ReadLine(), out note);\n\n        // Seulement si on a une note positive\n        // Ajuster le total\n        // Ajuster le nombre de notes entr\u00e9es\n        if (note &gt;= 0)\n        {\n            total = total + note;\n            nbNotes++;\n        }\n    }\n\n    moyenne = total / nbNotes;\n\n    Console.WriteLine(\"Nombre de notes : \" + nbNotes + \", Moyenne : \" + moyenne);\n}\n</code></pre>"},{"location":"solSem4a/","title":"Solutions possibles aux exercices de la semaine 4","text":"<pre><code>static void ex1()\n{\n    for (int i = 0; i &lt; 15; i++)\n    { \n        Console.WriteLine(\"ATTENTION!\");\n    }\n}\n</code></pre> <pre><code>static void ex2()\n{\n    for (int i = 1; i &lt; 11; i++)\n    {\n        Console.WriteLine(\"Nombre : \" + i + \" Carr\u00e9 : \" + i * i + \" Cube : \" + i * i * i);\n    }\n}\n</code></pre> <pre><code>static void ex3()\n{\n    double clesius = 0.0;\n\n    for (int farenheit = -40; farenheit &lt;= 40; farenheit = farenheit + 5)\n    {\n        clesius = 5.0 / 9.0 * (farenheit - 32.0);\n        Console.WriteLine(clesius);\n    }\n}\n</code></pre> <pre><code>static void ex4()\n{\n    double montant = 5.0;\n    for (int i = 1; i &lt;= 20; i++)\n    {\n        Console.WriteLine(\"Montant : \" + montant * i + \" Taxe : \" + montant * i * 0.15);\n    }\n}\n</code></pre> <pre><code>static void ex5()\n{\n    double total = 0.01;\n\n    for (int i = 0; i &lt; 30; i++)\n    {\n        total *= 2;\n    }\n\n    Console.WriteLine(total + \"$ est mieux que 1M$\");\n}\n</code></pre> <pre><code>static void ex6()\n{\n    for (int i = 1; i &lt; 50; i += 2)\n    {\n        Console.WriteLine(i);\n    }\n}\n</code></pre> <pre><code>static void ex7()\n{\n    int nbParLigne = 0;\n    for (int i = 1; i &lt; 50; i += 2)\n    {\n        Console.Write(i);\n        nbParLigne++;\n        if (nbParLigne == 5)\n        {\n            Console.WriteLine();\n            nbParLigne = 0;\n        }\n    }\n}\n</code></pre> <pre><code>static void ex8a()\n{\n    // option 1\n    string affichage = \"\";\n    for (int i = 0; i &lt; 4; i++)\n    {\n        affichage += \"#\";\n        Console.WriteLine(affichage);\n    }\n    // option 2\n    for (int i = 1; i &lt;= 4; i++)\n    {\n        for (int j = 0; j &lt; i; j++)\n        {\n            Console.Write(\"#\");\n        }\n        Console.WriteLine();\n    }\n}\n</code></pre> <pre><code>static void ex8b()\n{\n    // option 1\n    string affichage = \"\";\n    for (int i = 1; i &lt;= 4; i++)\n    {\n        affichage += i;\n        Console.WriteLine(affichage);\n    }\n    // option 2\n    for (int i = 1; i &lt;= 4; i++)\n    {\n        for (int j = 1; j &lt;= i; j++)\n        {\n            Console.Write(j);\n        }\n        Console.WriteLine();\n    }\n}\n</code></pre> <pre><code>static void ex8c()\n{\n    for (int i = 0; i &lt; 4; i++)\n    {\n        for (int j = 0; j &lt; 4 - i; j++)\n        {\n            Console.Write(\"#\");\n        }\n        Console.WriteLine();\n    }\n}\n</code></pre> <pre><code>static void ex8d()\n{\n    int nb = 0;\n    for (int i = 0; i &lt; 4; i++)\n    {\n        for (int j = 0; j &lt;= i; j++)\n        {\n            nb++;\n            Console.Write(nb);\n        }\n        Console.WriteLine();\n    }\n}\n</code></pre> <pre><code>static void ex8e()\n{\n    int nbParLigne = 0;\n    for (int i = 1; i &lt; 10; i++)\n    {\n        Console.WriteLine(i);\n        nbParLigne++;\n        if (nbParLigne == 3)\n        {\n            Console.WriteLine();\n        }\n    }\n}\n</code></pre>"},{"location":"solSem5/","title":"Semaine 5","text":"<pre><code>// \u00c9crire une m\u00e9thode qui lit la taille d'un utilisateur et dit s'il est petit, moyen, ou grand\n// petit : moins de 1,70m \n// moyen : de 1,70m \u00e0 1,82m\n// grand : plus de 1,82m\nstatic void ex1()\n{\n    double taille = 0.0;\n\n    Console.WriteLine(\"Entrez votre taille : \");\n    double.TryParse(Console.ReadLine(), out taille);\n\n    if (taille &lt; 1.70)\n    {\n        Console.WriteLine(\"Petit\");\n    }\n    else if (taille &lt; 1.83)\n    {\n        Console.WriteLine(\"Moyen\");\n    }\n    else if (taille &gt; 1.82)\n    {\n        Console.WriteLine(\"Grand\");\n    }\n}\n</code></pre> <pre><code>// \u00c9crire la m\u00e9thode qui trouve le plus grand de trois nombres entr\u00e9s \u00e0 la console\nstatic void ex2()\n{\n    int nb1 = 0; \n    int nb2 = 0;\n    int nb3 = 0;\n\n    Console.WriteLine(\"Entrer 3 nombres\");\n    int.TryParse(Console.ReadLine(), out nb1);\n    int.TryParse(Console.ReadLine(), out nb2);\n    int.TryParse(Console.ReadLine(), out nb3);\n\n    if (nb1 &gt; nb2)\n    {\n        if (nb1 &gt; nb3)\n        {\n            Console.WriteLine(nb1 + \" est le plus grand\");\n        }\n        else\n        {\n            Console.WriteLine(nb3 + \" est le plus grand\");\n        }\n    }\n    else\n    {\n        if (nb2 &gt; nb3)\n        {\n            Console.WriteLine(nb2 + \" est le plus grand\");\n        }\n        else\n        {\n            Console.WriteLine(nb3 + \" est le plus grand\");\n        }\n    }\n}\n</code></pre> <pre><code>// \u00c0 partir des angles internes d'un triangle d\u00e9terminer si le triangle est valide ou non\n// La somme des angles d'un triangle est toujours 180 degr\u00e9s\nstatic void ex3()\n{\n    int angle1 = 0;\n    int angle2 = 0;\n    int angle3 = 0;\n\n    Console.WriteLine(\"Entrer les 3 angles du triangle\");\n\n    if ((angle1 + angle2 + angle3) == 180)\n    {\n        Console.WriteLine(\"Triangle valide\");\n    }\n    else \n    {\n        Console.WriteLine(\"Pas un triangle\");\n    }\n}\n</code></pre> <pre><code>// Saisir la longueur des 3 c\u00f4t\u00e9s d'un triangle (a, b et c)\n// \u00c0 partir des informations d\u00e9terminer si le triangle est\n// \u00c9quilat\u00e9ral : tous les c\u00f4t\u00e9s ont la m\u00eame longueur\n// Isoc\u00e8le : 2 c\u00f4t\u00e9s \u00e9gaux\n// Scal\u00e8ne : aucun c\u00f4t\u00e9 n'est \u00e9gal \nstatic void ex4()\n{\n    int a = 0;\n    int b = 0;\n    int c = 0;\n\n    Console.WriteLine(\"Entrer la longueur des c\u00f4t\u00e9s du triangle\");\n    int.TryParse(Console.ReadLine(), out a);\n    int.TryParse(Console.ReadLine(), out b);\n    int.TryParse(Console.ReadLine(), out c);\n\n    if (a == b)\n    {\n        if (b == c)\n        {\n            Console.WriteLine(\"\u00c9quilat\u00e9ral\");\n        }\n        else\n        {\n            Console.WriteLine(\"Isoc\u00e8le\");\n        }\n    }\n    else\n    {\n        if (b == c)\n        {\n            Console.WriteLine(\"Isoc\u00e8le\");\n        }\n        else\n        {\n            Console.WriteLine(\"Scal\u00e8ne\");\n        }\n    }\n}\n</code></pre> <pre><code>// \u00c0 partir des informations fournies par l'utilisateur calculer la facture du mois pour sa consommation d'\u00e9lectricit\u00e9\n// Frais d'acc\u00e8s au r\u00e9seau par jour : 0.42238$\n// Jusqu'\u00e0 40kWh par jour pour le total des jours (ex: 30 jours = 1200kWh) : 0.06319$ par kWh\n// kWh suppl\u00e9mentaires : 0.09749$ par kWh\nstatic void ex5()\n{\n    int nombreJours = 0;\n    double kWh = 0.0;\n    double seuil = 0.0;\n    double acces = 0.0;\n    double total = 0.0;\n\n    Console.WriteLine(\"Combien de jours : \");\n    int.TryParse(Console.ReadLine(), out nombreJours);\n\n    Console.WriteLine(\"Combien de kWh : \");\n    double.TryParse(Console.ReadLine(), out kWh);\n\n    seuil = nombreJours * 40;\n    acces = nombreJours * 0.42238;\n    total = total + acces;\n\n    if (kWh &lt; seuil)\n    {\n        total = total + kWh * 0.06319;\n    }\n    else \n    {\n        total = total + seuil * 0.06319;\n        total = total + (kWh - seuil) * 0.09749;\n    }\n}\n</code></pre> <pre><code>// Jeux pair ou impair\n// Le premier joueur choisi 0 ou 1\n// Le premier joueur choisi pair ou impair\n// On efface la console\n// Le deuxi\u00e8me joueur choisi 0 ou 1\n// On affiche le gagnant selon la somme des deux nombres\n// Si la sommme correspond au type de r\u00e9sultat choisi par le premier joueur (pair ou impair) il a gagn\u00e9\n// Sinon le 2\u00e8me joueur a gagn\u00e9\nstatic void ex6()\n{\n    int nbJoueur1 = 0;\n    int nbJoueur2 = 0;\n    string pairImpair = \"pair\";\n\n    Console.WriteLine(\"Joueur 1 choisi 1 ou 0\");\n    int.TryParse(Console.ReadLine(), out nbJoueur1);\n\n    Console.WriteLine(\"Joueur 1 choisi pair/impair\");\n    pairImpair = Console.ReadLine();\n\n    Console.Clear();\n\n    Console.WriteLine(\"Joueur 2 choisi 1 ou 0\");\n    int.TryParse(Console.ReadLine(), out nbJoueur2);\n\n    Console.Clear();\n\n    if ((nbJoueur1 + nbJoueur2) % 2 == 0)\n    {\n        if (pairImpair == \"pair\")\n        {\n            Console.WriteLine(\"Joueur 1 gagne!\");\n        }\n        else\n        {\n            Console.WriteLine(\"Joueur 2 gagne!\");\n        }\n    }\n    else\n    {\n        if (pairImpair == \"impair\")\n        {\n            Console.WriteLine(\"Joueur 1 gagne!\");\n        }\n        else\n        {\n            Console.WriteLine(\"Joueur 2 gagne!\");\n        }\n    }\n}\n</code></pre> <pre><code>// Pour \u00eatre admis en m\u00e9decine il faut \n// Une cote R au-dessus de 33.0\n// Une note sup\u00e9rieure \u00e0 70% en biologie, chimie et math\u00e9matiques\n// Une moyenne sup\u00e9rieure \u00e0 80% pour les 3 cours pr\u00e9c\u00e9dents\n// \u00c9crire le programme qui d\u00e9termine si l'utilisateur est \u00e9ligible\nstatic void ex7()\n{\n    double coteR = 0.0;\n    double bio = 0.0;\n    double chimie = 0.0;\n    double math = 0.0;\n    double moyenne = 0.0;\n    bool admissible = true;\n\n    Console.WriteLine(\"Entrer la cote R\");\n    double.TryParse(Console.ReadLine(), out coteR);\n\n    Console.WriteLine(\"Entrer la note de biologie\");\n    double.TryParse(Console.ReadLine(), out bio);\n\n    Console.WriteLine(\"Entrer la note de chimie\");\n    double.TryParse(Console.ReadLine(), out chimie);\n\n    Console.WriteLine(\"Entrer la note de math\");\n    double.TryParse(Console.ReadLine(), out math);\n\n    moyenne = (bio + chimie + math) / 3;\n\n    if (coteR &lt; 33.0)\n    {\n        admissible = false;\n    }\n    else if (moyenne &lt; 80.0)\n    {\n        admissible = false;\n    }\n    else\n    {\n        if (bio &lt; 70.0)\n        {\n            admissible = false;\n        }\n        if (chimie &lt; 70.0)\n        {\n            admissible = false;\n        }\n        if (math &lt; 70.0)\n        {\n            admissible = false;\n        }\n    }\n\n    if (admissible)\n    {\n        Console.WriteLine(\"Tu peux aller en m\u00e9decine\");\n    }\n    else\n    {\n        Console.WriteLine(\"Tu devras te contenter d'attendre \u00e0 l'urgence\");\n    }\n}\n</code></pre>"},{"location":"string/","title":"Op\u00e9rations avec les cha\u00eenes de caract\u00e8res (string)","text":""},{"location":"string/#concatenation-combiner-plusieurs-chaines-avec-loperateur","title":"Concat\u00e9nation : Combiner plusieurs cha\u00eenes avec l'op\u00e9rateur +","text":"<p>Exemples de concat\u00e9nation</p> <pre><code>string nom = \"Smith\";\nstring prenom = \"Jean\";\nstring nomComplet = \"\";\n\nnomComplet = prenom + \" \" + nom;\n\n</code></pre>"},{"location":"string/#construire-une-phrase-selon-des-conditions","title":"Construire une phrase selon des conditions","text":"<p>En utilisant la concat\u00e9nation il est possible de configurer un message variable \u00e0 l'utilisateur</p> <pre><code>string facture = \"\";\nstring choix = \"\";\n\nConsole.WriteLine(\"Ajouter un contr\u00f4leur (1)Pi ou (2)Pi z\u00e9ro);\nchoix = Console.ReadLine();\n\nif(choix == \"1\")\n{\n    facture = facture + \"Contr\u00f4ler Pi, \";\n}\nelse\n{\n    facture = facture + \"Contr\u00f4leur Pi z\u00e9ro, \";\n}\n\nConsole.WriteLine(\"Matrice de LEDS? o/n\");\nchoix = Console.ReadLine();\n\nif(choix == \"o\")\n{\n    facture = facture + \"Matrice de LEDS, \";\n}\n</code></pre>"},{"location":"string/#mettre-des-variables-dans-une-chaine-de-caracteres","title":"Mettre des variables dans une cha\u00eene de caract\u00e8res","text":"<p>La m\u00e9thode Console.WriteLine accepte d'ajouter des variables dans un texte avec l'op\u00e9rateur + </p> <p>Cette fa\u00e7on peut devenir difficile \u00e0 lire, il existe aussi le formattage au moyen du $ ou de la m\u00e9thode string.Format();</p>"},{"location":"string/#formattage-avec","title":"Formattage avec $","text":"<p>En mettant $ devant les \"\" on peut introduire une variable dans notre ch\u00e2ine de caract\u00e8re directement;</p> <pre><code>string nom = \"Pierre Paul\";\nstring message = $\"Bonjour {nom}\";\n\nConsole.WriteLine(message);\n</code></pre> <p>R\u00e9sultat : Bonjour Pierre Paul</p>"},{"location":"string/#stringformat","title":"string.Format()","text":"<p>Avec string.Fromat() on peut mettre des accolades dans une phrase pour y introduire les valeurs de notre choix plus tard.</p> <pre><code>int nbMoteurs = 12;\nint nbBatteries = 2;\n\nstring facture = string.Format(\"Nb de moteurs : {0}  Nb de batteries : {1} \", nbMoteurs, nbBatteries);\n\n</code></pre> <p>Le premier param\u00e8tre de la m\u00e9thode : Une cha\u00eene de carat\u00e8re avec un nombre entre accolades pour chaque endroit o\u00f9 on ins\u00e8re une valeur</p> <p>Les nombres entre accolades doivent commencer \u00e0 0. L'ordre est important pour l'insertion des valeurs</p> <p>Les autres param\u00e8tres : Les valeurs \u00e0 ins\u00e9rer, dans l'ordre selon le nombre entre les accolades</p>"},{"location":"string/#les-string-sont-des-tableaux","title":"Les string sont des tableaux","text":"<p>On peut aller chercher les lettres en utilisant la notation : <code>nomDuString[positionDuCaract\u00e8re]</code></p> <p>Par exemple pour afficher les initiales d'un nom complet</p> <pre><code>string nom = \"Tremblay\";\nstring prenom = \"Keven\";\n\nConsole.WriteLine(prenom[0] + \".\" + nom[0] + \".\");\n</code></pre>"},{"location":"tableau/","title":"Structure de donn\u00e9es : tableau","text":"<p>Le tableau permet d'avoir plusieurs valeurs stock\u00e9es en m\u00e9moire pour une seule variable.</p> <p>Les donn\u00e9es stock\u00e9es dans le tableau doivent \u00eatre de la m\u00eame nature comme :</p> <ul> <li>Une s\u00e9rie de noms</li> <li>Une s\u00e9rie de notes</li> <li>Les prix des items dans un panier</li> </ul> <p>Le tableau permet entre autre :</p> <ul> <li>Faciliter le traitement de variables multiples (ex.: note1, note2, note3, ...)</li> <li>Utiliser une boucle pour traiter plusieurs donn\u00e9es</li> <li>Am\u00e9liorer le temps d'acc\u00e8s au donn\u00e9es (Les donn\u00e9es d'un tableau sont plac\u00e9e une \u00e0 c\u00f4t\u00e9 de l'autre en m\u00e9moire)</li> </ul>"},{"location":"tableau/#declaration","title":"D\u00e9claration","text":"<p><code>type[] nom = new type[nombre d'\u00e9l\u00e9ment]</code></p> <p>Le nombre de donn\u00e9es dans un tableau doit \u00eatre fix\u00e9e lors de la d\u00e9claration</p> <p>Exemple en C#</p> <p><code>int[] notes = new int[30];</code></p>"},{"location":"tableau/#declaration-alternative","title":"D\u00e9claration alternative","text":"<p>Quand on sait d\u00e9j\u00e0 ce qu'il y a dans le tableau, on peut d\u00e9clarer le tableau diff\u00e9rement.</p> <p><code>int[] notes = new int[]{98, 76, 42, 73, 89};</code> ou <code>int[] notes = {98, 76, 42, 73, 89};</code></p>"},{"location":"tableau/#utiliser-un-tableau","title":"Utiliser un tableau","text":"<ul> <li>Comme les variables, les valeurs des tableaux peuvent \u00eatre utilis\u00e9es pour des calculs ou modifi\u00e9es.</li> <li>Pour acc\u00e9der \u00e0 une donn\u00e9e du tableau, il faut indiquer sa position.</li> <li>La position d'une donn\u00e9e dans le tableau s'appelle index</li> <li>La num\u00e9rotation des index du tableau commence toujours \u00e0 0</li> <li>On peut obtenir la longueur d'un tableau en utilisant <code>nomDuTableau.Length</code></li> </ul> <p>Quelques exemples d'utilisation</p> <pre><code>int[] notes = {98, 76, 42, 73, 89};\ndouble moyenne = 0;\n\n// Modifier la premi\u00e8re note du tableau\nnotes[0] = 97;\n\n// Afficher la 3\u00e8me notes du tableau\nConsole.WriteLine(notes[2]);\n\n// Faire la moyenne avec une boucle\nfor(int i = 0; i &lt; notes.Length; i++)\n{\n    moyenne = moyenne + notes[i];\n}\nmoyenne = moyenne / notes.Length;\n</code></pre> <p>On utilise souvent une boucle pour acc\u00e9der \u00e0 chacune des valeurs du tableau!</p>"},{"location":"utils/","title":"Utilitaires et essentiels","text":""},{"location":"utils/#afficher-a-la-console-sans-sauter-de-ligne","title":"Afficher \u00e0 la console sans sauter de ligne","text":"<pre><code>Console.Write(\"Mon texte.\");\nConsole.Write(\" La suite de mon texte.\");\n</code></pre>"},{"location":"utils/#effacer-la-console","title":"Effacer la console","text":"<p><code>Console.Clear();</code></p>"},{"location":"utils/#inclure-un-saut-de-ligne-dans-une-message-de-type-string","title":"Inclure un saut de ligne dans une message de type string","text":"<p>Le symble \\n dans un texte fera sauter une ligne dans un string</p> <p><code>Console.WriteLine(\"Ma premi\u00e8re ligne \\n Ma deuxi\u00e8me ligne\");</code></p>"},{"location":"utils/#saisir-a-la-console","title":"Saisir \u00e0 la console","text":""},{"location":"utils/#texte","title":"Texte","text":"<pre><code>string leTexte = \"\";\n\nConsole.WriteLine(\"Entrer votre texte\");\nleTexte = Console.ReadLine();\n</code></pre>"},{"location":"utils/#nombre-entier-int","title":"Nombre entier (int)","text":"<pre><code>int nombre = 0;\n\nConsole.WriteLine(\"Entrer votre nombre\");\nint.TryParse(Console.ReadLine(), out nombre);\n</code></pre>"},{"location":"utils/#nombre-reel-double","title":"Nombre r\u00e9el (double)","text":"<pre><code>double nombre = 0;\n\nConsole.WriteLine(\"Entrer votre nombre\");\ndouble.TryParse(Console.ReadLine(), out nombre);\n</code></pre>"},{"location":"utils/#generer-une-nombre-aleatoire","title":"G\u00e9n\u00e9rer une nombre al\u00e9atoire","text":"<p>Placer cette initialisation au d\u00e9but de votre m\u00e9thode</p> <p><code>Random aleatoire = new Random();</code></p> <p>Pour assigner une nombre al\u00e9atoire \u00e0 une variable</p> <p><code>nombre = aleatoire.Next();</code></p> <p>Pour assigner une nombre al\u00e9atoire avec un maximum (commence \u00e0 0) Le maximum doit toujours \u00eatre plus grand de 1 que le nombre maximum d\u00e9sir\u00e9</p> <p><code>nombre = aleatoire.Next(101);</code></p> <p>Pour assigner une nombre al\u00e9atoire avec un minimum et un maximum Le maximum doit toujours \u00eatre plus grand de 1 que le nombre maximum d\u00e9sir\u00e9</p> <p><code>nombre = aleatoire.Next(1, 101);</code></p>"},{"location":"utils/#faire-une-pause","title":"Faire une pause","text":"<p><code>Thread.Sleep(1000);</code> </p> <p>Le param\u00e8tre pass\u00e9 \u00e0 la m\u00e9thode Sleep est un nombre de millisecondes. Le param\u00e8tre ci-dessus fait une pause de 1 seconde.</p>"},{"location":"utils/#caculer-la-puissance-exposant-et-la-racine-carre-dun-nombre","title":"Caculer la puissance (exposant) et la racine carr\u00e9 d'un nombre","text":"<p><code>Math.Pow(2,5);</code> \u00e9quivalent de 2 puissance 5, donne 32 <code>Math.Sqrt(4);</code>  \u00e9quivalent de la racine carr\u00e9 de 2, donne 2</p>"},{"location":"utils/#mettre-en-majusculesminuscules-une-chaine-de-caracteres-string-toupper-tolower","title":"Mettre en majuscules/minuscules une cha\u00eene de caract\u00e8res (string) : ToUpper(), ToLower()","text":"<pre><code>string nom = \"Denis\";\nstring nomEnMinuscules = \"\";\nstring nomEnMajuscules = \"\";\n\n// Mettre en minuscule\n\nnomEnMinuscules = nom.ToLower();\nnomEnMajuscules = nom.ToUpper();\n\n</code></pre>"},{"location":"utils/#lire-un-fichier-de-texte-extension-txt","title":"Lire un fichier de texte (extension .txt)","text":"<p>On a besoin des outils de traitement des fichiers. Il faut donc ajouter, au d\u00e9but du fichier (avant toutes les autres lignes) <code>using System.IO;</code></p> <p>Un peu comme dans le cas du g\u00e9n\u00e9rateur de nombres al\u00e9atoires, il y a une variable \u00e0 d\u00e9clarer et initialiser avant de lire le fichier\u200b <code>StreamReader lecteur = new StreamReader(\"MonTexte.txt\");\u200b</code></p> <p>ATTENTION! :</p> <ul> <li>Entre les parenth\u00e8ses il faut donner le nom du fichier \u00e0 lire et ce fichier doit \u00eatre dans le m\u00eame r\u00e9pertoire que le projet\u200b</li> <li>Dans Visual Studio, dans l'explorateur de solutions, cliquer de droite sur le fichier texte et s\u00e9lectionner Propri\u00e9t\u00e9s</li> <li>\u00c0 la propri\u00e9t\u00e9 Copier dans le r\u00e9pertoire de sortie choisir  Copier si plus r\u00e9cent</li> </ul> <p>Enfin, on peut lire une ligne du fichier\u200b <code>texte = lecteur.ReadLine();\u200b</code></p> <p>Il faut fermer le lecteur quand nos traitements sont termin\u00e9s, sinon l'ordinateur consid\u00e8re que le fichier est en cours d'utilisation\u200b <code>lecteur.Close();</code></p> <p>Exemple complet </p> <pre><code>static void Main(string[] args)\n{\n    string texte = \"\";\n    string cheminFichier = \"monTexte.txt\";\n    StreamReader lecteur = new StreamReader(cheminFichier);\n\n    // Tant que le lecteur n'est pas \u00e0 la fin du fichier\n    while (!lecteur.EndOfStream)\n    { \n        texte = lecteur.ReadLine();\n\n        Console.WriteLine(texte);\n    }\n\n    lecteur.Close();\n}\n</code></pre>"},{"location":"variables-types/","title":"Variables et types","text":""},{"location":"variables-types/#variables","title":"Variables","text":"<ul> <li>Les variables associent un espace dans la m\u00e9moire avec un nom.</li> <li>Elles sont utilis\u00e9es pour stocker les donn\u00e9es necessaires \u00e0 la programmation</li> </ul>"},{"location":"variables-types/#types","title":"Types","text":"<p>Le type d'une variable d\u00e9finit ce qu'elle contient et l'espace qu'elle utilise dans la m\u00e9moire :</p> <ul> <li>Un nombre entier : 1</li> <li>Un nombre r\u00e9el : 2.5</li> <li>Un caract\u00e8re : a</li> <li>Une phrase (cha\u00eene de caract\u00e8re) : Reste calme et appelle Fred</li> <li>Une valeur vrai ou faux : true</li> </ul> <p>Il existe beacuoup d'autres types pour les variables!</p>"},{"location":"variables-types/#types-de-base-en-c","title":"Types de base en C#","text":"<ul> <li><code>int</code> : un entier</li> <li><code>double</code> : un nombre r\u00e9el</li> <li><code>char</code>: un caract\u00e8re</li> <li><code>string</code>: une phrase</li> <li><code>bool</code>: vrai ou faux</li> </ul> <p>Il y a des types plus sp\u00e9cifiques. Il nous permettent d'utiliser plus ou moins de m\u00e9moire selon ce que l'on a l'intention de faire avec la variable. Par exemple :</p> <ul> <li><code>int</code>: un entier entre -2147483648 et 2147483647 prend 32 bit </li> <li><code>short</code>: un entier entre -32768 et 32767 prend 16 bit</li> </ul>"},{"location":"variables-types/#utiliser-une-variable","title":"Utiliser une variable","text":"<ol> <li>La d\u00e9clarer : La d\u00e9claration dit \u00e0 notre processeur de lui r\u00e9server un espace dans la m\u00e9moire vive</li> <li>Lui assigner une valeur : L'assignation met une valeur dans la m\u00e9moire</li> </ol> <p>Quand on combine la d\u00e9claration et l'assignation on initialise la variable.</p>"},{"location":"variables-types/#declaration","title":"D\u00e9claration","text":"<ul> <li>Quand on d\u00e9clare la variable il est obligatoire de d\u00e9terminer son type en premier, puis de lui donner une nom</li> <li>Le nom d'une variable doit \u00eatre significatif. On sait \u00e0 quoi elle sert en lisant le nom. Par exemple : moyenne, total, texteIntro, ...</li> <li>Le nom d'une variable commence par une lettre minuscule</li> <li>Si le nom d'une variable a plus qu'un mot, tous les mots apr\u00e8s le premier mot commencent par une majuscule</li> </ul> <p>Quelques exemples de d\u00e9claration :</p> <ul> <li><code>int total;</code></li> <li><code>double moyenne;</code></li> <li><code>string prenom;</code></li> </ul>"},{"location":"variables-types/#assignation","title":"Assignation","text":"<ul> <li>L'assignation se fait avec l'op\u00e9rateur =</li> <li>Il faut que la valeur assign\u00e9e corresponde au type de la vairable</li> </ul> <p>Quelques exemples d'assignation (avec la d\u00e9claration avant) :</p> <pre><code>string prenom;\nprenom = \"Jean\"\n</code></pre> <pre><code>double moyenne;\nmoyenne = 78.23;\n</code></pre> <p>On ne r\u00e9p\u00e8te pas le type lors de l'assignation </p>"},{"location":"variables-types/#initialisation","title":"Initialisation","text":"<p>L'initialisation combine la d\u00e9claration et l'assignation en une seule instruction</p> <p>Il est important d'initialiser les variables pour \u00e9viter la possibilit\u00e9 d'erreur</p> <p>Quand on ne sait pas d'avance quelle valeur assigner, on met une valeur par d\u00e9faut :</p> <ul> <li>int : 0</li> <li>double : 0.0</li> <li>char : ''</li> <li>string : \"\"</li> <li>bool : true</li> </ul> <p>Quelques exemple d'initialisation :</p> <pre><code>int total = 0;\ndouble moyenne = 0.0;\nchar code = '';\nstring prenom = \"\";\nbool valide = true;\n</code></pre>"},{"location":"while/","title":"Boucle : while","text":"<p>La boucle while continue tant que son travail n'est pas fini.</p>"},{"location":"while/#syntaxe","title":"Syntaxe","text":"<pre><code>while(condtion)\n{\n    // instructions\n}\n</code></pre>"},{"location":"while/#condition-de-fin","title":"Condition de fin","text":"<p>La boucle arr\u00eate quand la condition entre parenth\u00e8ses a une valeur logique : faux</p> <p>Donc une boucle </p> <pre><code>while(true)\n{\n\n}\n</code></pre> <p>n'arr\u00eate jamais!</p>"},{"location":"while/#boucle-avec-compteur","title":"Boucle avec compteur","text":"<p>La technique habituelle pour d\u00e9terminer le nombre de fois que la boucle est ex\u00e9cut\u00e9e :</p> <ul> <li>Une variable qui compte les tours. Elle commence habituellement \u00e0 0</li> <li>La condition entre les parenth\u00e8ses donne vrai ou faux selon la valeur du compteur</li> <li>La boucle fait ses instructions tant que le compteur est plus petite que le nombre maximum de boucles \u00e0 faire</li> </ul> <pre><code>// Cette boucle ex\u00e9cute ses instructions 10 fois\nint compteur = 0;\nwhile(compteur &lt; 10)\n{\n    // instructions\n}\n</code></pre>"}]}